{
  "version": 3,
  "sources": ["..\\src\\db\\connection.ts", "..\\src\\services\\jwt.ts", "..\\src\\services\\auth.ts", "..\\src\\services\\permissions.ts", "..\\src\\middleware\\auth.ts", "..\\src\\adapters\\hono.ts", "..\\src\\adapters\\express.ts", "..\\src\\adapters\\websocket.ts", "..\\src\\db\\migrations.ts", "..\\src\\config\\auth.ts", "..\\src\\scripts\\seed.ts", "..\\src\\scripts\\dev.ts", "..\\src\\index.ts"],
  "sourcesContent": [
    "// src/db/connection.ts\nimport { Database } from \"bun:sqlite\";\n\n/**\n * Instancia global de la base de datos SQLite\n */\nlet db: Database;\n\n/**\n * Inicializa la conexi√≥n a la base de datos SQLite\n * @param dbPath Ruta al archivo de base de datos SQLite\n * @returns Instancia de la base de datos\n */\nexport function initDatabase(dbPath: string = \"./auth.db\"): Database {\n  if (!db) {\n    try {\n      // Crear conexi√≥n a SQLite usando Bun Database\n      db = new Database(dbPath);\n      console.log(`‚úÖ Base de datos SQLite inicializada: ${dbPath}`);\n    } catch (error:any) {\n      console.error(`‚ùå Error al inicializar la base de datos: ${error}`);\n      throw new Error(`Failed to initialize database: ${error}`);\n    }\n  }\n  return db;\n}\n\n/**\n * Obtiene la instancia actual de la base de datos\n * @returns Instancia de la base de datos\n * @throws Error si la base de datos no ha sido inicializada\n */\nexport function getDatabase(): Database {\n  if (!db) {\n    console.log(\"‚ö†Ô∏è Database not initialized, auto-initializing with test.db\");\n    initDatabase('./test.db');\n  }\n  \n  return db;\n}\n\nexport function forceReinitDatabase(): Database {\n  console.log(\"üîÑ Force reinitializing database...\");\n  db = null;\n  initDatabase('./test.db');\n  return db;\n}\n\n/**\n * Cierra la conexi√≥n a la base de datos\n */\nexport async function closeDatabase(): Promise<void> {\n  if (db) {\n    try {\n      // Cerrar la conexi√≥n de la base de datos\n      db.close();\n      db = null as any;\n      console.log(\"‚úÖ Conexi√≥n a la base de datos cerrada\");\n    } catch (error:any) {\n      console.error(`‚ùå Error al cerrar la base de datos: ${error}`);\n      throw error;\n    }\n  }\n}\n\n/**\n * Verifica si la base de datos est√° inicializada\n * @returns true si la base de datos est√° inicializada\n */\nexport function isDatabaseInitialized(): boolean {\n  return db !== undefined && db !== null;\n}\n\n/**\n * Ejecuta una consulta de prueba para verificar la conexi√≥n\n * @returns Promise que resuelve si la conexi√≥n es exitosa\n */\nexport async function testConnection(): Promise<boolean> {\n  try {\n    const db = getDatabase();\n    db.query(\"SELECT 1 as test\").get();\n    console.log(\"‚úÖ Conexi√≥n a la base de datos verificada\");\n    return true;\n  } catch (error:any) {\n    console.error(`‚ùå Error en la conexi√≥n a la base de datos: ${error}`);\n    return false;\n  }\n}\n\n/**\n * Habilita las claves for√°neas en SQLite\n * Debe llamarse despu√©s de inicializar la base de datos\n */\nexport async function enableForeignKeys(): Promise<void> {\n  try {\n    const db = getDatabase();\n    db.exec(\"PRAGMA foreign_keys = ON\");\n    console.log(\"‚úÖ Claves for√°neas habilitadas\");\n  } catch (error:any) {\n    console.error(`‚ùå Error al habilitar claves for√°neas: ${error}`);\n    throw error;\n  }\n}\n\n/**\n * Configura optimizaciones para SQLite\n */\nexport async function optimizeDatabase(): Promise<void> {\n  try {\n    const db = getDatabase();\n    \n    // Configuraciones de rendimiento para SQLite\n    db.exec(\"PRAGMA journal_mode = WAL\"); // Write-Ahead Logging para mejor concurrencia\n    db.exec(\"PRAGMA synchronous = NORMAL\"); // Balance entre seguridad y rendimiento\n    db.exec(\"PRAGMA cache_size = 10000\"); // Cache de 10MB aproximadamente\n    db.exec(\"PRAGMA temp_store = memory\"); // Usar memoria para tablas temporales\n    db.exec(\"PRAGMA mmap_size = 268435456\"); // 256MB de memory-mapped I/O\n    \n    console.log(\"‚úÖ Optimizaciones de base de datos aplicadas\");\n  } catch (error:any) {\n    console.error(`‚ùå Error al aplicar optimizaciones: ${error}`);\n    throw error;\n  }\n}\n\n/**\n * Obtiene informaci√≥n sobre la base de datos\n * @returns Informaci√≥n de la base de datos\n */\nexport async function getDatabaseInfo(): Promise<{\n  version: string;\n  pageSize: number;\n  encoding: string;\n  journalMode: string;\n}> {\n  try {\n    const db = getDatabase();\n    \n    const versionResult = db.query(\"PRAGMA user_version\").get() as { user_version: number } | undefined;\n    const pageSizeResult = db.query(\"PRAGMA page_size\").get() as { page_size: number } | undefined;\n    const encodingResult = db.query(\"PRAGMA encoding\").get() as { encoding: string } | undefined;\n    const journalModeResult = db.query(\"PRAGMA journal_mode\").get() as { journal_mode: string } | undefined;\n    \n    return {\n      version: (versionResult?.user_version || 0).toString(),\n      pageSize: pageSizeResult?.page_size || 0,\n      encoding: encodingResult?.encoding || 'unknown',\n      journalMode: journalModeResult?.journal_mode || 'unknown'\n    };\n  } catch (error:any) {\n    console.error(`‚ùå Error al obtener informaci√≥n de la base de datos: ${error}`);\n    throw error;\n  }\n}\n\n/**\n * Ejecuta VACUUM para optimizar el archivo de base de datos\n */\nexport async function vacuumDatabase(): Promise<void> {\n  try {\n    const db = getDatabase();\n    db.exec(\"VACUUM\");\n    console.log(\"‚úÖ VACUUM ejecutado exitosamente\");\n  } catch (error:any) {\n    console.error(`‚ùå Error al ejecutar VACUUM: ${error}`);\n    throw error;\n  }\n}\n\n/**\n * Verifica la integridad de la base de datos\n * @returns true si la base de datos est√° √≠ntegra\n */\nexport async function checkIntegrity(): Promise<boolean> {\n  try {\n    const db = getDatabase();\n    const result = db.query(\"PRAGMA integrity_check\").all() as { integrity_check: string }[];\n    const isOk = result.length === 1 && result[0].integrity_check === 'ok';\n    \n    if (isOk) {\n      console.log(\"‚úÖ Integridad de la base de datos verificada\");\n    } else {\n      console.warn(\"‚ö†Ô∏è Problemas de integridad detectados:\", result);\n    }\n    \n    return isOk;\n  } catch (error:any) {\n    console.error(`‚ùå Error al verificar integridad: ${error}`);\n    return false;\n  }\n}",
    "// src/services/jwt.ts\nimport type { JWTPayload, User } from '../types/auth';\n\n/**\n * Servicio para manejar operaciones JWT\n * Utiliza las APIs nativas de Bun para JWT\n */\nexport class JWTService {\n  private secret: string;\n  private expiresIn: string;\n\n  constructor(secret: string, expiresIn: string = '24h') {\n    if (!secret) {\n      throw new Error('JWT secret is required');\n    }\n    this.secret = secret;\n    this.expiresIn = expiresIn;\n  }\n\n  /**\n   * Genera un token JWT para un usuario\n   * @param user Usuario para el cual generar el token\n   * @returns Token JWT\n   */\n  async generateToken(user: User): Promise<string> {\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const expirationTime = this.parseExpirationTime(this.expiresIn);\n      \n      const payload: JWTPayload = {\n        userId: user.id,\n        email: user.email,\n        roles: user.roles.map(role => role.name),\n        iat: now,\n        exp: now + expirationTime\n      };\n\n      // Usar la API nativa de Bun para JWT\n      const token = await Bun.password.hash(JSON.stringify(payload), {\n        algorithm: 'bcrypt',\n        cost: 10\n      });\n\n      // Como Bun no tiene JWT nativo a√∫n, implementamos una versi√≥n simple\n      const header = {\n        alg: 'HS256',\n        typ: 'JWT'\n      };\n\n      const encodedHeader = this.base64UrlEncode(JSON.stringify(header));\n      const encodedPayload = this.base64UrlEncode(JSON.stringify(payload));\n      \n      const signature = await this.createSignature(`${encodedHeader}.${encodedPayload}`);\n      \n      return `${encodedHeader}.${encodedPayload}.${signature}`;\n    } catch (error:any) {\n      console.error('Error generating JWT token:', error);\n      throw new Error('Failed to generate token');\n    }\n  }\n\n  /**\n   * Verifica y decodifica un token JWT\n   * @param token Token JWT a verificar\n   * @returns Payload del token si es v√°lido\n   * @throws Error si el token es inv√°lido\n   */\n  async verifyToken(token: string): Promise<JWTPayload> {\n    try {\n      if (!token) {\n        throw new Error('Token is required');\n      }\n\n      const parts = token.split('.');\n      if (parts.length !== 3) {\n        throw new Error('Invalid token format');\n      }\n\n      const [encodedHeader, encodedPayload, signature] = parts;\n      \n      // Verificar la firma\n      const expectedSignature = await this.createSignature(`${encodedHeader}.${encodedPayload}`);\n      if (signature !== expectedSignature) {\n        throw new Error('Invalid token signature');\n      }\n\n      // Decodificar el payload\n      const payload: JWTPayload = JSON.parse(this.base64UrlDecode(encodedPayload));\n      \n      // Verificar expiraci√≥n\n      const now = Math.floor(Date.now() / 1000);\n      if (payload.exp && payload.exp < now) {\n        throw new Error('Token has expired');\n      }\n\n      return payload;\n    } catch (error:any) {\n      console.error('Error verifying JWT token:', error);\n      throw new Error(`Invalid token: ${error.message}`);\n    }\n  }\n\n  /**\n   * Extrae el token del header Authorization\n   * @param authHeader Header de autorizaci√≥n\n   * @returns Token JWT o null si no se encuentra\n   */\n  extractTokenFromHeader(authHeader: string): string | null {\n    if (!authHeader) {\n      return null;\n    }\n\n    const parts = authHeader.split(' ');\n    if (parts.length !== 2 || parts[0] !== 'Bearer') {\n      return null;\n    }\n\n    return parts[1];\n  }\n\n  /**\n   * Verifica si un token est√° expirado sin verificar la firma\n   * @param token Token JWT\n   * @returns true si est√° expirado\n   */\n  isTokenExpired(token: string): boolean {\n    try {\n      const parts = token.split('.');\n      if (parts.length !== 3) {\n        return true;\n      }\n\n      const payload: JWTPayload = JSON.parse(this.base64UrlDecode(parts[1]));\n      const now = Math.floor(Date.now() / 1000);\n      \n      return payload.exp ? payload.exp < now : false;\n    } catch (error:any) {\n      return true;\n    }\n  }\n\n  /**\n   * Obtiene el tiempo restante de un token en segundos\n   * @param token Token JWT\n   * @returns Segundos restantes o 0 si est√° expirado\n   */\n  getTokenRemainingTime(token: string): number {\n    try {\n      const parts = token.split('.');\n      if (parts.length !== 3) {\n        return 0;\n      }\n\n      const payload: JWTPayload = JSON.parse(this.base64UrlDecode(parts[1]));\n      const now = Math.floor(Date.now() / 1000);\n      \n      if (!payload.exp) {\n        return Infinity;\n      }\n\n      const remaining = payload.exp - now;\n      return Math.max(0, remaining);\n    } catch (error:any) {\n      return 0;\n    }\n  }\n\n  /**\n   * Refresca un token si est√° pr√≥ximo a expirar\n   * @param token Token actual\n   * @param user Usuario asociado al token\n   * @param refreshThreshold Umbral en segundos para refrescar (default: 1 hora)\n   * @returns Nuevo token o el mismo si no necesita refresh\n   */\n  async refreshTokenIfNeeded(\n    token: string, \n    user: User, \n    refreshThreshold: number = 3600\n  ): Promise<string> {\n    const remainingTime = this.getTokenRemainingTime(token);\n    \n    if (remainingTime <= refreshThreshold) {\n      return await this.generateToken(user);\n    }\n    \n    return token;\n  }\n\n  /**\n   * Codifica en Base64 URL-safe\n   * @param str String a codificar\n   * @returns String codificado\n   */\n  private base64UrlEncode(str: string): string {\n    const base64 = Buffer.from(str).toString('base64');\n    return base64\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '');\n  }\n\n  /**\n   * Decodifica de Base64 URL-safe\n   * @param str String a decodificar\n   * @returns String decodificado\n   */\n  private base64UrlDecode(str: string): string {\n    // Agregar padding si es necesario\n    let padded = str;\n    while (padded.length % 4) {\n      padded += '=';\n    }\n    \n    const base64 = padded\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n    \n    return Buffer.from(base64, 'base64').toString('utf-8');\n  }\n\n  /**\n   * Crea una firma HMAC SHA-256\n   * @param data Datos a firmar\n   * @returns Firma en base64 URL-safe\n   */\n  private async createSignature(data: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const keyData = encoder.encode(this.secret);\n    const messageData = encoder.encode(data);\n    \n    // Importar la clave\n    const key = await crypto.subtle.importKey(\n      'raw',\n      keyData,\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['sign']\n    );\n    \n    // Crear la firma\n    const signature = await crypto.subtle.sign('HMAC', key, messageData);\n    const signatureArray = new Uint8Array(signature);\n    \n    // Convertir a base64 URL-safe\n    const base64 = Buffer.from(signatureArray).toString('base64');\n    return base64\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '');\n  }\n\n  /**\n   * Parsea el tiempo de expiraci√≥n a segundos\n   * @param expiresIn String de tiempo (ej: '24h', '7d', '30m')\n   * @returns Segundos\n   */\n  private parseExpirationTime(expiresIn: string): number {\n    const units: Record<string, number> = {\n      's': 1,\n      'm': 60,\n      'h': 3600,\n      'd': 86400,\n      'w': 604800\n    };\n\n    const match = expiresIn.match(/^(\\d+)([smhdw])$/);\n    if (!match) {\n      throw new Error(`Invalid expiration format: ${expiresIn}`);\n    }\n\n    const [, value, unit] = match;\n    const multiplier = units[unit];\n    \n    if (!multiplier) {\n      throw new Error(`Invalid time unit: ${unit}`);\n    }\n\n    return parseInt(value) * multiplier;\n  }\n\n  /**\n   * Genera un token de refresh\n   * @param userId ID del usuario\n   * @returns Token de refresh\n   */\n  async generateRefreshToken(userId: string): Promise<string> {\n    const payload = {\n      userId,\n      type: 'refresh',\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60) // 30 d√≠as\n    };\n\n    const encodedPayload = this.base64UrlEncode(JSON.stringify(payload));\n    const signature = await this.createSignature(encodedPayload);\n    \n    return `${encodedPayload}.${signature}`;\n  }\n\n  /**\n   * Verifica un token de refresh\n   * @param refreshToken Token de refresh\n   * @returns User ID si es v√°lido\n   */\n  async verifyRefreshToken(refreshToken: string): Promise<string> {\n    try {\n      const parts = refreshToken.split('.');\n      if (parts.length !== 2) {\n        throw new Error('Invalid refresh token format');\n      }\n\n      const [encodedPayload, signature] = parts;\n      \n      // Verificar la firma\n      const expectedSignature = await this.createSignature(encodedPayload);\n      if (signature !== expectedSignature) {\n        throw new Error('Invalid refresh token signature');\n      }\n\n      const payload = JSON.parse(this.base64UrlDecode(encodedPayload));\n      \n      // Verificar tipo y expiraci√≥n\n      if (payload.type !== 'refresh') {\n        throw new Error('Invalid token type');\n      }\n\n      const now = Math.floor(Date.now() / 1000);\n      if (payload.exp && payload.exp < now) {\n        throw new Error('Refresh token has expired');\n      }\n\n      return payload.userId;\n    } catch (error:any) {\n      throw new Error(`Invalid refresh token: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Instancia singleton del servicio JWT\n */\nlet jwtServiceInstance: JWTService | null = null;\n\n/**\n * Inicializa el servicio JWT\n * @param secret Secreto para firmar tokens\n * @param expiresIn Tiempo de expiraci√≥n\n * @returns Instancia del servicio JWT\n */\nexport function initJWTService(secret: string, expiresIn?: string): JWTService {\n  jwtServiceInstance = new JWTService(secret, expiresIn);\n  return jwtServiceInstance;\n}\n\n/**\n * Obtiene la instancia del servicio JWT\n * @returns Instancia del servicio JWT\n * @throws Error si no ha sido inicializado\n */\nexport function getJWTService(): JWTService {\n  if (!jwtServiceInstance) {\n    throw new Error('JWT Service not initialized. Call initJWTService() first.');\n  }\n  return jwtServiceInstance;\n}",
    "// src/services/auth.ts\nimport { getDatabase } from '../db/connection';\nimport { getJWTService } from './jwt';\nimport type { \n  User, \n  RegisterData, \n  LoginData, \n  AuthResult, \n  UserQueryOptions,\n  AuthError,\n  AuthErrorType \n} from '../types/auth';\n\n/**\n * Servicio de autenticaci√≥n\n * Maneja registro, login y operaciones de usuario\n */\nexport class AuthService {\n  /**\n   * Registra un nuevo usuario\n   * @param data Datos de registro\n   * @returns Usuario creado y token\n   */\n  async register(data: RegisterData): Promise<AuthResult> {\n    try {\n      const db = getDatabase();\n      const jwtService = getJWTService();\n\n      // Validar datos de entrada\n      this.validateRegisterData(data);\n\n      // Verificar si el usuario ya existe\n      const existingUser = await this.findUserByEmail(data.email);\n      if (existingUser) {\n        throw new Error('User already exists with this email');\n      }\n\n      // Hash de la contrase√±a usando Bun\n      const passwordHash = await Bun.password.hash(data.password, {\n        algorithm: 'bcrypt',\n        cost: 12\n      });\n\n      // Crear usuario en la base de datos\n      const userId = crypto.randomUUID();\n      await db`\n        INSERT INTO users (id, email, password_hash, created_at, updated_at, is_active)\n        VALUES (${userId}, ${data.email.toLowerCase()}, ${passwordHash}, datetime('now'), datetime('now'), 1)\n      `;\n\n      // Asignar rol por defecto (user)\n      await this.assignDefaultRole(userId);\n\n      // Obtener el usuario completo con roles\n      const user = await this.findUserById(userId, { includeRoles: true, includePermissions: true });\n      if (!user) {\n        throw new Error('Failed to create user');\n      }\n\n      // Generar token JWT\n      const token = await jwtService.generateToken(user);\n\n      console.log(`‚úÖ Usuario registrado: ${user.email}`);\n\n      return { user, token };\n    } catch (error:any) {\n      console.error('Error registering user:', error);\n      throw new Error(`Registration failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Autentica un usuario\n   * @param data Datos de login\n   * @returns Usuario y token si la autenticaci√≥n es exitosa\n   */\n  async login(data: LoginData): Promise<AuthResult> {\n    try {\n      const db = getDatabase();\n      const jwtService = getJWTService();\n\n      // Validar datos de entrada\n      this.validateLoginData(data);\n\n      // Buscar usuario por email\n      const user = await this.findUserByEmail(data.email, { \n        includeRoles: true, \n        includePermissions: true \n      });\n\n      if (!user) {\n        throw new Error('Invalid credentials');\n      }\n\n      // Verificar si el usuario est√° activo\n      if (!user.is_active) {\n        throw new Error('Account is deactivated');\n      }\n\n      // Verificar contrase√±a\n      const isValidPassword = await Bun.password.verify(data.password, user.password_hash);\n      if (!isValidPassword) {\n        throw new Error('Invalid credentials');\n      }\n\n      // Actualizar √∫ltima actividad\n      await db`\n        UPDATE users \n        SET updated_at = datetime('now')\n        WHERE id = ${user.id}\n      `;\n\n      // Generar token JWT\n      const token = await jwtService.generateToken(user);\n\n      console.log(`‚úÖ Usuario autenticado: ${user.email}`);\n\n      return { user, token };\n    } catch (error:any) {\n      console.error('Error during login:', error);\n      throw new Error(`Login failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Busca un usuario por ID\n   * @param id ID del usuario\n   * @param options Opciones de consulta\n   * @returns Usuario o null si no se encuentra\n   */\n  async findUserById(id: string, options: UserQueryOptions = {}): Promise<User | null> {\n    try {\n      const db = getDatabase();\n\n      // Consulta base del usuario\n      const userResult = await db`\n        SELECT id, email, password_hash, created_at, updated_at, is_active\n        FROM users\n        WHERE id = ${id}\n        ${options.activeOnly ? db`AND is_active = 1` : db``}\n      `;\n\n      if (userResult.length === 0) {\n        return null;\n      }\n\n      const userData = userResult[0];\n      const user: User = {\n        id: userData.id,\n        email: userData.email,\n        password_hash: userData.password_hash,\n        created_at: new Date(userData.created_at),\n        updated_at: new Date(userData.updated_at),\n        is_active: Boolean(userData.is_active),\n        roles: []\n      };\n\n      // Incluir roles si se solicita\n      if (options.includeRoles) {\n        user.roles = await this.getUserRoles(id, options.includePermissions);\n      }\n\n      return user;\n    } catch (error:any) {\n      console.error('Error finding user by ID:', error);\n      throw new Error(`Failed to find user: ${error.message}`);\n    }\n  }\n\n  /**\n   * Busca un usuario por email\n   * @param email Email del usuario\n   * @param options Opciones de consulta\n   * @returns Usuario o null si no se encuentra\n   */\n  async findUserByEmail(email: string, options: UserQueryOptions = {}): Promise<User | null> {\n    try {\n      const db = getDatabase();\n\n      const userResult = await db`\n        SELECT id, email, password_hash, created_at, updated_at, is_active\n        FROM users\n        WHERE email = ${email.toLowerCase()}\n        ${options.activeOnly ? db`AND is_active = 1` : db``}\n      `;\n\n      if (userResult.length === 0) {\n        return null;\n      }\n\n      const userData = userResult[0];\n      const user: User = {\n        id: userData.id,\n        email: userData.email,\n        password_hash: userData.password_hash,\n        created_at: new Date(userData.created_at),\n        updated_at: new Date(userData.updated_at),\n        is_active: Boolean(userData.is_active),\n        roles: []\n      };\n\n      // Incluir roles si se solicita\n      if (options.includeRoles) {\n        user.roles = await this.getUserRoles(userData.id, options.includePermissions);\n      }\n\n      return user;\n    } catch (error:any) {\n      console.error('Error finding user by email:', error);\n      throw new Error(`Failed to find user: ${error.message}`);\n    }\n  }\n\n  /**\n   * Obtiene los roles de un usuario\n   * @param userId ID del usuario\n   * @param includePermissions Si incluir permisos de los roles\n   * @returns Array de roles\n   */\n  async getUserRoles(userId: string, includePermissions: boolean = false) {\n    try {\n      const db = getDatabase();\n\n      const rolesResult = await db`\n        SELECT r.id, r.name, r.created_at\n        FROM roles r\n        INNER JOIN user_roles ur ON r.id = ur.role_id\n        WHERE ur.user_id = ${userId}\n        ORDER BY r.name\n      `;\n\n      const roles = [];\n      for (const roleData of rolesResult) {\n        const role = {\n          id: roleData.id,\n          name: roleData.name,\n          created_at: new Date(roleData.created_at),\n          permissions: []\n        };\n\n        // Incluir permisos si se solicita\n        if (includePermissions) {\n          const permissionsResult = await db`\n            SELECT p.id, p.name, p.resource, p.action, p.created_at\n            FROM permissions p\n            INNER JOIN role_permissions rp ON p.id = rp.permission_id\n            WHERE rp.role_id = ${role.id}\n            ORDER BY p.resource, p.action\n          `;\n\n          role.permissions = permissionsResult.map(permData => ({\n            id: permData.id,\n            name: permData.name,\n            resource: permData.resource,\n            action: permData.action,\n            created_at: new Date(permData.created_at)\n          }));\n        }\n\n        roles.push(role);\n      }\n\n      return roles;\n    } catch (error:any) {\n      console.error('Error getting user roles:', error);\n      throw new Error(`Failed to get user roles: ${error.message}`);\n    }\n  }\n\n  /**\n   * Asigna el rol por defecto a un usuario\n   * @param userId ID del usuario\n   */\n  private async assignDefaultRole(userId: string): Promise<void> {\n    try {\n      const db = getDatabase();\n\n      // Buscar o crear el rol 'user'\n      let userRole = await db`\n        SELECT id FROM roles WHERE name = 'user'\n      `;\n\n      if (userRole.length === 0) {\n        // Crear rol 'user' si no existe\n        const roleId = crypto.randomUUID();\n        await db`\n          INSERT INTO roles (id, name, created_at)\n          VALUES (${roleId}, 'user', datetime('now'))\n        `;\n        userRole = [{ id: roleId }];\n      }\n\n      // Asignar rol al usuario\n      await db`\n        INSERT INTO user_roles (id, user_id, role_id, created_at)\n        VALUES (${crypto.randomUUID()}, ${userId}, ${userRole[0].id}, datetime('now'))\n      `;\n    } catch (error:any) {\n      console.error('Error assigning default role:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Valida los datos de registro\n   * @param data Datos de registro\n   */\n  private validateRegisterData(data: RegisterData): void {\n    if (!data.email || !data.password) {\n      throw new Error('Email and password are required');\n    }\n\n    // Validar formato de email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(data.email)) {\n      throw new Error('Invalid email format');\n    }\n\n    // Validar contrase√±a\n    if (data.password.length < 8) {\n      throw new Error('Password must be at least 8 characters long');\n    }\n\n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(data.password)) {\n      throw new Error('Password must contain at least one uppercase letter, one lowercase letter, and one number');\n    }\n  }\n\n  /**\n   * Valida los datos de login\n   * @param data Datos de login\n   */\n  private validateLoginData(data: LoginData): void {\n    if (!data.email || !data.password) {\n      throw new Error('Email and password are required');\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(data.email)) {\n      throw new Error('Invalid email format');\n    }\n  }\n\n  /**\n   * Actualiza la contrase√±a de un usuario\n   * @param userId ID del usuario\n   * @param newPassword Nueva contrase√±a\n   */\n  async updatePassword(userId: string, newPassword: string): Promise<void> {\n    try {\n      const db = getDatabase();\n\n      // Validar nueva contrase√±a\n      if (newPassword.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n\n      // Hash de la nueva contrase√±a\n      const passwordHash = await Bun.password.hash(newPassword, {\n        algorithm: 'bcrypt',\n        cost: 12\n      });\n\n      // Actualizar en la base de datos\n      await db`\n        UPDATE users \n        SET password_hash = ${passwordHash}, updated_at = datetime('now')\n        WHERE id = ${userId}\n      `;\n\n      console.log(`‚úÖ Contrase√±a actualizada para usuario: ${userId}`);\n    } catch (error:any) {\n      console.error('Error updating password:', error);\n      throw new Error(`Failed to update password: ${error.message}`);\n    }\n  }\n\n  /**\n   * Desactiva un usuario\n   * @param userId ID del usuario\n   */\n  async deactivateUser(userId: string): Promise<void> {\n    try {\n      const db = getDatabase();\n\n      await db`\n        UPDATE users \n        SET is_active = 0, updated_at = datetime('now')\n        WHERE id = ${userId}\n      `;\n\n      console.log(`‚úÖ Usuario desactivado: ${userId}`);\n    } catch (error:any) {\n      console.error('Error deactivating user:', error);\n      throw new Error(`Failed to deactivate user: ${error.message}`);\n    }\n  }\n\n  /**\n   * Activa un usuario\n   * @param userId ID del usuario\n   */\n  async activateUser(userId: string): Promise<void> {\n    try {\n      const db = getDatabase();\n\n      await db`\n        UPDATE users \n        SET is_active = 1, updated_at = datetime('now')\n        WHERE id = ${userId}\n      `;\n\n      console.log(`‚úÖ Usuario activado: ${userId}`);\n    } catch (error:any) {\n      console.error('Error activating user:', error);\n      throw new Error(`Failed to activate user: ${error.message}`);\n    }\n  }\n\n  /**\n   * Obtiene todos los usuarios con paginaci√≥n\n   * @param page P√°gina (empezando en 1)\n   * @param limit L√≠mite por p√°gina\n   * @param options Opciones de consulta\n   * @returns Array de usuarios y total\n   */\n  async getUsers(\n    page: number = 1, \n    limit: number = 10, \n    options: UserQueryOptions = {}\n  ): Promise<{ users: User[], total: number }> {\n    try {\n      const db = getDatabase();\n      const offset = (page - 1) * limit;\n\n      // Contar total de usuarios\n      const countResult = await db`\n        SELECT COUNT(*) as total\n        FROM users\n        ${options.activeOnly ? db`WHERE is_active = 1` : db``}\n      `;\n      const total = countResult[0].total;\n\n      // Obtener usuarios con paginaci√≥n\n      const usersResult = await db`\n        SELECT id, email, password_hash, created_at, updated_at, is_active\n        FROM users\n        ${options.activeOnly ? db`WHERE is_active = 1` : db``}\n        ORDER BY created_at DESC\n        LIMIT ${limit} OFFSET ${offset}\n      `;\n\n      const users = [];\n      for (const userData of usersResult) {\n        const user: User = {\n          id: userData.id,\n          email: userData.email,\n          password_hash: userData.password_hash,\n          created_at: new Date(userData.created_at),\n          updated_at: new Date(userData.updated_at),\n          is_active: Boolean(userData.is_active),\n          roles: []\n        };\n\n        // Incluir roles si se solicita\n        if (options.includeRoles) {\n          user.roles = await this.getUserRoles(userData.id, options.includePermissions);\n        }\n\n        users.push(user);\n      }\n\n      return { users, total };\n    } catch (error:any) {\n      console.error('Error getting users:', error);\n      throw new Error(`Failed to get users: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Instancia singleton del servicio de autenticaci√≥n\n */\nlet authServiceInstance: AuthService | null = null;\n\n/**\n * Inicializa el servicio de autenticaci√≥n\n * @returns Instancia del servicio de autenticaci√≥n\n */\nexport function initAuthService(): AuthService {\n  authServiceInstance = new AuthService();\n  return authServiceInstance;\n}\n\n/**\n * Obtiene la instancia del servicio de autenticaci√≥n\n * @returns Instancia del servicio de autenticaci√≥n\n * @throws Error si no ha sido inicializado\n */\nexport function getAuthService(): AuthService {\n  if (!authServiceInstance) {\n    throw new Error('Auth Service not initialized. Call initAuthService() first.');\n  }\n  return authServiceInstance;\n}",
    "// src/services/permissions.ts\nimport { getDatabase } from '../db/connection';\nimport type { \n  Role, \n  Permission, \n  CreateRoleData, \n  CreatePermissionData, \n  AssignRoleData, \n  PermissionOptions \n} from '../types/auth';\n\n/**\n * Servicio de permisos y gesti√≥n de roles\n * Maneja la creaci√≥n, asignaci√≥n y verificaci√≥n de roles y permisos\n */\nexport class PermissionService {\n  /**\n   * Crea un nuevo permiso\n   * @param data Datos del permiso\n   * @returns Permiso creado\n   */\n  async createPermission(data: CreatePermissionData): Promise<Permission> {\n    try {\n      const db = getDatabase();\n\n      // Validar datos\n      this.validatePermissionData(data);\n\n      // Verificar si el permiso ya existe\n      const existingPermission = await this.findPermissionByName(data.name);\n      if (existingPermission) {\n        throw new Error(`Permission '${data.name}' already exists`);\n      }\n\n      // Crear permiso\n      const permissionId = crypto.randomUUID();\n      db.query(\n        \"INSERT INTO permissions (id, name, resource, action, created_at) VALUES (?, ?, ?, ?, datetime('now'))\"\n      ).run(permissionId, data.name, data.resource, data.action);\n\n      // Obtener el permiso creado\n      const permission = await this.findPermissionById(permissionId);\n      if (!permission) {\n        throw new Error('Failed to create permission');\n      }\n\n      console.log(`‚úÖ Permiso creado: ${permission.name}`);\n      return permission;\n    } catch (error:any) {\n      console.error('Error creating permission:', error);\n      throw new Error(`Failed to create permission: ${error.message}`);\n    }\n  }\n\n  /**\n   * Crea un nuevo rol\n   * @param data Datos del rol\n   * @returns Rol creado\n   */\n  async createRole(data: CreateRoleData): Promise<Role> {\n    try {\n      const db = getDatabase();\n\n      // Validar datos\n      this.validateRoleData(data);\n\n      // Verificar si el rol ya existe\n      const existingRole = await this.findRoleByName(data.name);\n      if (existingRole) {\n        throw new Error(`Role '${data.name}' already exists`);\n      }\n\n      // Crear rol\n      const roleId = crypto.randomUUID();\n      db.query(\n        \"INSERT INTO roles (id, name, created_at) VALUES (?, ?, datetime('now'))\"\n      ).run(roleId, data.name);\n\n      // Asignar permisos si se proporcionan\n      if (data.permissionIds && data.permissionIds.length > 0) {\n        await this.assignPermissionsToRole(roleId, data.permissionIds);\n      }\n\n      // Obtener el rol creado con permisos\n      const role = await this.findRoleById(roleId, true);\n      if (!role) {\n        throw new Error('Failed to create role');\n      }\n\n      console.log(`‚úÖ Rol creado: ${role.name}`);\n      return role;\n    } catch (error:any) {\n      console.error('Error creating role:', error);\n      throw new Error(`Failed to create role: ${error.message}`);\n    }\n  }\n\n  /**\n   * Asigna un rol a un usuario\n   * @param data Datos de asignaci√≥n\n   */\n  async assignRoleToUser(data: AssignRoleData): Promise<void> {\n    try {\n      const db = getDatabase();\n\n      // Verificar que el usuario y el rol existen\n      const userExists = await this.checkUserExists(data.userId);\n      if (!userExists) {\n        throw new Error('User not found');\n      }\n\n      const roleExists = await this.checkRoleExists(data.roleId);\n      if (!roleExists) {\n        throw new Error('Role not found');\n      }\n\n      // Verificar si la asignaci√≥n ya existe\n      const existingAssignment = await db`\n        SELECT id FROM user_roles \n        WHERE user_id = ${data.userId} AND role_id = ${data.roleId}\n      `;\n\n      if (existingAssignment.length > 0) {\n        throw new Error('User already has this role');\n      }\n\n      // Crear asignaci√≥n\n      await db`\n        INSERT INTO user_roles (id, user_id, role_id, created_at)\n        VALUES (${crypto.randomUUID()}, ${data.userId}, ${data.roleId}, datetime('now'))\n      `;\n\n      console.log(`‚úÖ Rol asignado al usuario: ${data.userId} -> ${data.roleId}`);\n    } catch (error:any) {\n      console.error('Error assigning role to user:', error);\n      throw new Error(`Failed to assign role: ${error.message}`);\n    }\n  }\n\n  /**\n   * Remueve un rol de un usuario\n   * @param userId ID del usuario\n   * @param roleId ID del rol\n   */\n  async removeRoleFromUser(userId: string, roleId: string): Promise<void> {\n    try {\n      const db = getDatabase();\n\n      const result = await db`\n        DELETE FROM user_roles \n        WHERE user_id = ${userId} AND role_id = ${roleId}\n      `;\n\n      console.log(`‚úÖ Rol removido del usuario: ${userId} -> ${roleId}`);\n    } catch (error:any) {\n      console.error('Error removing role from user:', error);\n      throw new Error(`Failed to remove role: ${error.message}`);\n    }\n  }\n\n  /**\n   * Asigna permisos a un rol\n   * @param roleId ID del rol\n   * @param permissionIds Array de IDs de permisos\n   */\n  async assignPermissionsToRole(roleId: string, permissionIds: string[]): Promise<void> {\n    try {\n      const db = getDatabase();\n\n      // Verificar que el rol existe\n      const roleExists = await this.checkRoleExists(roleId);\n      if (!roleExists) {\n        throw new Error('Role not found');\n      }\n\n      // Verificar que todos los permisos existen\n      for (const permissionId of permissionIds) {\n        const permissionExists = await this.checkPermissionExists(permissionId);\n        if (!permissionExists) {\n          throw new Error(`Permission not found: ${permissionId}`);\n        }\n      }\n\n      // Asignar permisos (ignorar duplicados)\n      for (const permissionId of permissionIds) {\n        try {\n          db.query(\n            \"INSERT INTO role_permissions (id, role_id, permission_id, created_at) VALUES (?, ?, ?, datetime('now'))\"\n          ).run(crypto.randomUUID(), roleId, permissionId);\n        } catch (error:any) {\n          // Ignorar errores de duplicados\n          if (!error.message.includes('UNIQUE constraint')) {\n            throw error;\n          }\n        }\n      }\n\n      console.log(`‚úÖ Permisos asignados al rol: ${roleId}`);\n    } catch (error:any) {\n      console.error('Error assigning permissions to role:', error);\n      throw new Error(`Failed to assign permissions: ${error.message}`);\n    }\n  }\n\n  /**\n   * Remueve permisos de un rol\n   * @param roleId ID del rol\n   * @param permissionIds Array de IDs de permisos\n   */\n  async removePermissionsFromRole(roleId: string, permissionIds: string[]): Promise<void> {\n    try {\n      const db = getDatabase();\n\n      for (const permissionId of permissionIds) {\n        await db`\n          DELETE FROM role_permissions \n          WHERE role_id = ${roleId} AND permission_id = ${permissionId}\n        `;\n      }\n\n      console.log(`‚úÖ Permisos removidos del rol: ${roleId}`);\n    } catch (error:any) {\n      console.error('Error removing permissions from role:', error);\n      throw new Error(`Failed to remove permissions: ${error.message}`);\n    }\n  }\n\n  /**\n   * Verifica si un usuario tiene un permiso espec√≠fico\n   * @param userId ID del usuario\n   * @param permissionName Nombre del permiso\n   * @param options Opciones de verificaci√≥n\n   * @returns true si el usuario tiene el permiso\n   */\n  async userHasPermission(\n    userId: string, \n    permissionName: string, \n    options: PermissionOptions = {}\n  ): Promise<boolean> {\n    try {\n      const db = getDatabase();\n\n      const result = await db`\n        SELECT COUNT(*) as count\n        FROM permissions p\n        INNER JOIN role_permissions rp ON p.id = rp.permission_id\n        INNER JOIN user_roles ur ON rp.role_id = ur.role_id\n        WHERE ur.user_id = ${userId} AND p.name = ${permissionName}\n      `;\n\n      return result[0].count > 0;\n    } catch (error:any) {\n      console.error('Error checking user permission:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Verifica si un usuario tiene m√∫ltiples permisos\n   * @param userId ID del usuario\n   * @param permissionNames Array de nombres de permisos\n   * @param options Opciones de verificaci√≥n\n   * @returns true si cumple con los criterios\n   */\n  async userHasPermissions(\n    userId: string, \n    permissionNames: string[], \n    options: PermissionOptions = {}\n  ): Promise<boolean> {\n    try {\n      if (permissionNames.length === 0) {\n        return true;\n      }\n\n      const results = await Promise.all(\n        permissionNames.map(permission => \n          this.userHasPermission(userId, permission, options)\n        )\n      );\n\n      // Si requireAll es true, todos los permisos deben estar presentes\n      if (options.requireAll) {\n        return results.every(result => result);\n      }\n\n      // Por defecto, solo se requiere uno (OR)\n      return results.some(result => result);\n    } catch (error:any) {\n      console.error('Error checking user permissions:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Obtiene todos los permisos de un usuario\n   * @param userId ID del usuario\n   * @returns Array de permisos\n   */\n  async getUserPermissions(userId: string): Promise<Permission[]> {\n    try {\n      const db = getDatabase();\n\n      const result = await db`\n        SELECT DISTINCT p.id, p.name, p.resource, p.action, p.created_at\n        FROM permissions p\n        INNER JOIN role_permissions rp ON p.id = rp.permission_id\n        INNER JOIN user_roles ur ON rp.role_id = ur.role_id\n        WHERE ur.user_id = ${userId}\n        ORDER BY p.resource, p.action\n      `;\n\n      return result.map(row => ({\n        id: row.id,\n        name: row.name,\n        resource: row.resource,\n        action: row.action,\n        created_at: new Date(row.created_at)\n      }));\n    } catch (error:any) {\n      console.error('Error getting user permissions:', error);\n      throw new Error(`Failed to get user permissions: ${error.message}`);\n    }\n  }\n\n  /**\n   * Busca un permiso por ID\n   * @param id ID del permiso\n   * @returns Permiso o null\n   */\n  async findPermissionById(id: string): Promise<Permission | null> {\n    try {\n      const db = getDatabase();\n\n      const result = db.query(\n        \"SELECT id, name, resource, action, created_at FROM permissions WHERE id = ?\"\n      ).all(id);\n\n      if (result.length === 0) {\n        return null;\n      }\n\n      const row = result[0];\n      return {\n        id: row.id,\n        name: row.name,\n        resource: row.resource,\n        action: row.action,\n        created_at: new Date(row.created_at)\n      };\n    } catch (error:any) {\n      console.error('Error finding permission by ID:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Busca un permiso por nombre\n   * @param name Nombre del permiso\n   * @returns Permiso o null\n   */\n  async findPermissionByName(name: string): Promise<Permission | null> {\n    try {\n      const db = getDatabase();\n\n      const result = db.query(\n        \"SELECT id, name, resource, action, created_at FROM permissions WHERE name = ?\"\n      ).all(name);\n\n      if (result.length === 0) {\n        return null;\n      }\n\n      const row = result[0];\n      return {\n        id: row.id,\n        name: row.name,\n        resource: row.resource,\n        action: row.action,\n        created_at: new Date(row.created_at)\n      };\n    } catch (error:any) {\n      console.error('Error finding permission by name:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Busca un rol por ID\n   * @param id ID del rol\n   * @param includePermissions Si incluir permisos\n   * @returns Rol o null\n   */\n  async findRoleById(id: string, includePermissions: boolean = false): Promise<Role | null> {\n    try {\n      const db = getDatabase();\n\n      const result = db.query(\n        \"SELECT id, name, created_at FROM roles WHERE id = ?\"\n      ).all(id);\n\n      if (result.length === 0) {\n        return null;\n      }\n\n      const row = result[0];\n      const role: Role = {\n        id: row.id,\n        name: row.name,\n        created_at: new Date(row.created_at),\n        permissions: []\n      };\n\n      if (includePermissions) {\n        role.permissions = await this.getRolePermissions(id);\n      }\n\n      return role;\n    } catch (error:any) {\n      console.error('Error finding role by ID:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Busca un rol por nombre\n   * @param name Nombre del rol\n   * @param includePermissions Si incluir permisos\n   * @returns Rol o null\n   */\n  async findRoleByName(name: string, includePermissions: boolean = false): Promise<Role | null> {\n    try {\n      const db = getDatabase();\n\n      const result = db.query(\n        \"SELECT id, name, created_at FROM roles WHERE name = ?\"\n      ).all(name);\n\n      if (result.length === 0) {\n        return null;\n      }\n\n      const row = result[0];\n      const role: Role = {\n        id: row.id,\n        name: row.name,\n        created_at: new Date(row.created_at),\n        permissions: []\n      };\n\n      if (includePermissions) {\n        role.permissions = await this.getRolePermissions(row.id);\n      }\n\n      return role;\n    } catch (error:any) {\n      console.error('Error finding role by name:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Obtiene los permisos de un rol\n   * @param roleId ID del rol\n   * @returns Array de permisos\n   */\n  async getRolePermissions(roleId: string): Promise<Permission[]> {\n    try {\n      const db = getDatabase();\n\n      const result = db.query(`\n        SELECT p.id, p.name, p.resource, p.action, p.created_at\n        FROM permissions p\n        INNER JOIN role_permissions rp ON p.id = rp.permission_id\n        WHERE rp.role_id = ?\n        ORDER BY p.resource, p.action\n      `).all(roleId);\n\n      return result.map(row => ({\n        id: row.id,\n        name: row.name,\n        resource: row.resource,\n        action: row.action,\n        created_at: new Date(row.created_at)\n      }));\n    } catch (error:any) {\n      console.error('Error getting role permissions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Obtiene todos los roles\n   * @param includePermissions Si incluir permisos\n   * @returns Array de roles\n   */\n  async getAllRoles(includePermissions: boolean = false): Promise<Role[]> {\n    try {\n      const db = getDatabase();\n\n      const result = await db`\n        SELECT id, name, created_at\n        FROM roles\n        ORDER BY name\n      `;\n\n      const roles = [];\n      for (const row of result) {\n        const role: Role = {\n          id: row.id,\n          name: row.name,\n          created_at: new Date(row.created_at),\n          permissions: []\n        };\n\n        if (includePermissions) {\n          role.permissions = await this.getRolePermissions(row.id);\n        }\n\n        roles.push(role);\n      }\n\n      return roles;\n    } catch (error:any) {\n      console.error('Error getting all roles:', error);\n      throw new Error(`Failed to get roles: ${error.message}`);\n    }\n  }\n\n  /**\n   * Obtiene todos los permisos\n   * @returns Array de permisos\n   */\n  async getAllPermissions(): Promise<Permission[]> {\n    try {\n      const db = getDatabase();\n\n      const result = await db`\n        SELECT id, name, resource, action, created_at\n        FROM permissions\n        ORDER BY resource, action\n      `;\n\n      return result.map(row => ({\n        id: row.id,\n        name: row.name,\n        resource: row.resource,\n        action: row.action,\n        created_at: new Date(row.created_at)\n      }));\n    } catch (error:any) {\n      console.error('Error getting all permissions:', error);\n      throw new Error(`Failed to get permissions: ${error.message}`);\n    }\n  }\n\n  // M√©todos de validaci√≥n y utilidad privados\n\n  private validatePermissionData(data: CreatePermissionData): void {\n    if (!data.name || !data.resource || !data.action) {\n      throw new Error('Name, resource, and action are required');\n    }\n\n    if (data.name.length < 3) {\n      throw new Error('Permission name must be at least 3 characters long');\n    }\n  }\n\n  private validateRoleData(data: CreateRoleData): void {\n    if (!data.name) {\n      throw new Error('Role name is required');\n    }\n\n    if (data.name.length < 3) {\n      throw new Error('Role name must be at least 3 characters long');\n    }\n  }\n\n  private async checkUserExists(userId: string): Promise<boolean> {\n    try {\n      const db = getDatabase();\n      const result = await db`SELECT id FROM users WHERE id = ${userId}`;\n      return result.length > 0;\n    } catch (error:any) {\n      return false;\n    }\n  }\n\n  private async checkRoleExists(roleId: string): Promise<boolean> {\n    try {\n      const db = getDatabase();\n      const result = db.query(\"SELECT id FROM roles WHERE id = ?\").all(roleId);\n      return result.length > 0;\n    } catch (error:any) {\n      return false;\n    }\n  }\n\n  private async checkPermissionExists(permissionId: string): Promise<boolean> {\n    try {\n      const db = getDatabase();\n      const result = db.query(\"SELECT id FROM permissions WHERE id = ?\").all(permissionId);\n      return result.length > 0;\n    } catch (error:any) {\n      return false;\n    }\n  }\n}\n\n/**\n * Instancia singleton del servicio de permisos\n */\nlet permissionServiceInstance: PermissionService | null = null;\n\n/**\n * Inicializa el servicio de permisos\n * @returns Instancia del servicio de permisos\n */\nexport function initPermissionService(): PermissionService {\n  permissionServiceInstance = new PermissionService();\n  return permissionServiceInstance;\n}\n\n/**\n * Obtiene la instancia del servicio de permisos\n * @returns Instancia del servicio de permisos\n * @throws Error si no ha sido inicializado\n */\nexport function getPermissionService(): PermissionService {\n  if (!permissionServiceInstance) {\n    throw new Error('Permission Service not initialized. Call initPermissionService() first.');\n  }\n  return permissionServiceInstance;\n}",
    "// src/middleware/auth.ts\nimport { getJWTService } from '../services/jwt';\nimport { getAuthService } from '../services/auth';\nimport { getPermissionService } from '../services/permissions';\nimport type { \n  AuthRequest, \n  AuthResponse, \n  AuthContext, \n  PermissionOptions,\n  AuthError,\n  AuthErrorType \n} from '../types/auth';\n\n/**\n * Configuraci√≥n del middleware de autenticaci√≥n\n */\nexport interface AuthMiddlewareConfig {\n  required?: boolean; // Si la autenticaci√≥n es requerida\n  permissions?: string[]; // Permisos requeridos\n  permissionOptions?: PermissionOptions; // Opciones de verificaci√≥n de permisos\n  skipPaths?: string[]; // Rutas que se saltan la autenticaci√≥n\n  tokenHeader?: string; // Header del token (default: 'authorization')\n}\n\n/**\n * Funci√≥n de middleware agn√≥stica para autenticaci√≥n\n * Esta funci√≥n puede ser adaptada a cualquier framework\n */\nexport async function authenticateRequest(\n  request: AuthRequest,\n  config: AuthMiddlewareConfig = {}\n): Promise<{ success: boolean; context?: AuthContext; error?: string; statusCode?: number }> {\n  try {\n    const {\n      required = true,\n      permissions = [],\n      permissionOptions = {},\n      tokenHeader = 'authorization'\n    } = config;\n\n    // Extraer token del header\n    const authHeader = request.headers[tokenHeader] || request.headers[tokenHeader.toLowerCase()];\n    \n    if (!authHeader) {\n      if (!required) {\n        return { success: true, context: { permissions: [] } };\n      }\n      return {\n        success: false,\n        error: 'Authorization header is required',\n        statusCode: 401\n      };\n    }\n\n    const jwtService = getJWTService();\n    const token = jwtService.extractTokenFromHeader(authHeader);\n    \n    if (!token) {\n      return {\n        success: false,\n        error: 'Invalid authorization header format. Use: Bearer <token>',\n        statusCode: 401\n      };\n    }\n\n    // Verificar token\n    let payload;\n    try {\n      payload = await jwtService.verifyToken(token);\n    } catch (error:any) {\n      return {\n        success: false,\n        error: 'Invalid or expired token',\n        statusCode: 401\n      };\n    }\n\n    // Obtener usuario completo\n    const authService = getAuthService();\n    const user = await authService.findUserById(payload.userId, {\n      includeRoles: true,\n      includePermissions: true,\n      activeOnly: true\n    });\n\n    if (!user) {\n      return {\n        success: false,\n        error: 'User not found or inactive',\n        statusCode: 401\n      };\n    }\n\n    // Obtener permisos del usuario\n    const permissionService = getPermissionService();\n    const userPermissions = await permissionService.getUserPermissions(user.id);\n    const permissionNames = userPermissions.map(p => p.name);\n\n    // Crear contexto de autenticaci√≥n\n    const authContext: AuthContext = {\n      user,\n      token,\n      permissions: permissionNames\n    };\n\n    // Verificar permisos si se requieren\n    if (permissions.length > 0) {\n      const hasPermissions = await permissionService.userHasPermissions(\n        user.id,\n        permissions,\n        permissionOptions\n      );\n\n      if (!hasPermissions) {\n        return {\n          success: false,\n          error: `Insufficient permissions. Required: ${permissions.join(', ')}`,\n          statusCode: 403\n        };\n      }\n    }\n\n    return { success: true, context: authContext };\n  } catch (error:any) {\n    console.error('Authentication middleware error:', error);\n    return {\n      success: false,\n      error: 'Internal authentication error',\n      statusCode: 500\n    };\n  }\n}\n\n/**\n * Middleware para verificar solo permisos (asume que ya est√° autenticado)\n */\nexport async function authorizeRequest(\n  authContext: AuthContext,\n  requiredPermissions: string[],\n  options: PermissionOptions = {}\n): Promise<{ success: boolean; error?: string; statusCode?: number }> {\n  try {\n    if (!authContext.user) {\n      return {\n        success: false,\n        error: 'User not authenticated',\n        statusCode: 401\n      };\n    }\n\n    if (requiredPermissions.length === 0) {\n      return { success: true };\n    }\n\n    const permissionService = getPermissionService();\n    const hasPermissions = await permissionService.userHasPermissions(\n      authContext.user.id,\n      requiredPermissions,\n      options\n    );\n\n    if (!hasPermissions) {\n      return {\n        success: false,\n        error: `Insufficient permissions. Required: ${requiredPermissions.join(', ')}`,\n        statusCode: 403\n      };\n    }\n\n    return { success: true };\n  } catch (error:any) {\n    console.error('Authorization error:', error);\n    return {\n      success: false,\n      error: 'Internal authorization error',\n      statusCode: 500\n    };\n  }\n}\n\n/**\n * Funci√≥n helper para verificar si una ruta debe ser saltada\n */\nexport function shouldSkipAuth(path: string, skipPaths: string[] = []): boolean {\n  return skipPaths.some(skipPath => {\n    // Soporte para wildcards simples\n    if (skipPath.endsWith('*')) {\n      const basePath = skipPath.slice(0, -1);\n      return path.startsWith(basePath);\n    }\n    return path === skipPath;\n  });\n}\n\n/**\n * Funci√≥n helper para extraer informaci√≥n del usuario del contexto\n */\nexport function getCurrentUser(authContext?: AuthContext) {\n  return authContext?.user || null;\n}\n\n/**\n * Funci√≥n helper para verificar si el usuario tiene un rol espec√≠fico\n */\nexport function userHasRole(authContext: AuthContext, roleName: string): boolean {\n  if (!authContext.user) {\n    return false;\n  }\n  return authContext.user.roles.some(role => role.name === roleName);\n}\n\n/**\n * Funci√≥n helper para verificar si el usuario tiene alguno de los roles especificados\n */\nexport function userHasAnyRole(authContext: AuthContext, roleNames: string[]): boolean {\n  if (!authContext.user) {\n    return false;\n  }\n  return authContext.user.roles.some(role => roleNames.includes(role.name));\n}\n\n/**\n * Funci√≥n helper para verificar si el usuario tiene todos los roles especificados\n */\nexport function userHasAllRoles(authContext: AuthContext, roleNames: string[]): boolean {\n  if (!authContext.user) {\n    return false;\n  }\n  return roleNames.every(roleName => \n    authContext.user!.roles.some(role => role.name === roleName)\n  );\n}\n\n/**\n * Funci√≥n helper para verificar si el usuario tiene un permiso espec√≠fico\n */\nexport function userHasPermission(authContext: AuthContext, permissionName: string): boolean {\n  if (!authContext.permissions) {\n    return false;\n  }\n  return authContext.permissions.includes(permissionName);\n}\n\n/**\n * Funci√≥n helper para verificar si el usuario tiene alguno de los permisos especificados\n */\nexport function userHasAnyPermission(authContext: AuthContext, permissionNames: string[]): boolean {\n  if (!authContext.permissions) {\n    return false;\n  }\n  return permissionNames.some(permission => authContext.permissions!.includes(permission));\n}\n\n/**\n * Funci√≥n helper para verificar si el usuario tiene todos los permisos especificados\n */\nexport function userHasAllPermissions(authContext: AuthContext, permissionNames: string[]): boolean {\n  if (!authContext.permissions) {\n    return false;\n  }\n  return permissionNames.every(permission => authContext.permissions!.includes(permission));\n}\n\n/**\n * Funci√≥n helper para verificar si el usuario es el propietario de un recurso\n */\nexport function isResourceOwner(authContext: AuthContext, resourceUserId: string): boolean {\n  if (!authContext.user) {\n    return false;\n  }\n  return authContext.user.id === resourceUserId;\n}\n\n/**\n * Funci√≥n helper para verificar si el usuario es admin\n */\nexport function isAdmin(authContext: AuthContext): boolean {\n  return userHasRole(authContext, 'admin') || userHasRole(authContext, 'administrator');\n}\n\n/**\n * Funci√≥n helper para verificar si el usuario es moderador\n */\nexport function isModerator(authContext: AuthContext): boolean {\n  return userHasRole(authContext, 'moderator') || isAdmin(authContext);\n}\n\n/**\n * Funci√≥n helper para crear un contexto de autenticaci√≥n vac√≠o\n */\nexport function createEmptyAuthContext(): AuthContext {\n  return {\n    permissions: []\n  };\n}\n\n/**\n * Funci√≥n helper para refrescar el token si est√° pr√≥ximo a expirar\n */\nexport async function refreshTokenIfNeeded(authContext: AuthContext): Promise<string | null> {\n  try {\n    if (!authContext.user || !authContext.token) {\n      return null;\n    }\n\n    const jwtService = getJWTService();\n    const newToken = await jwtService.refreshTokenIfNeeded(\n      authContext.token,\n      authContext.user,\n      3600 // 1 hora antes de expirar\n    );\n\n    return newToken !== authContext.token ? newToken : null;\n  } catch (error:any) {\n    console.error('Error refreshing token:', error);\n    return null;\n  }\n}\n\n/**\n * Funci√≥n helper para validar permisos de recursos espec√≠ficos\n */\nexport async function validateResourcePermission(\n  authContext: AuthContext,\n  resource: string,\n  action: string,\n  resourceUserId?: string\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    // Verificar si es el propietario del recurso\n    if (resourceUserId && isResourceOwner(authContext, resourceUserId)) {\n      return { success: true };\n    }\n\n    // Verificar si es admin (puede hacer todo)\n    if (isAdmin(authContext)) {\n      return { success: true };\n    }\n\n    // Verificar permiso espec√≠fico\n    const permissionName = `${resource}.${action}`;\n    if (userHasPermission(authContext, permissionName)) {\n      return { success: true };\n    }\n\n    // Verificar permiso gen√©rico\n    const genericPermission = `${resource}.*`;\n    if (userHasPermission(authContext, genericPermission)) {\n      return { success: true };\n    }\n\n    return {\n      success: false,\n      error: `Insufficient permissions for ${resource}.${action}`\n    };\n  } catch (error:any) {\n    console.error('Error validating resource permission:', error);\n    return {\n      success: false,\n      error: 'Internal error validating permissions'\n    };\n  }\n}\n\n/**\n * Funci√≥n helper para crear respuestas de error estandarizadas\n */\nexport function createAuthErrorResponse(\n  error: string,\n  statusCode: number = 401,\n  type: AuthErrorType = 'INVALID_CREDENTIALS' as AuthErrorType\n) {\n  return {\n    success: false,\n    error: {\n      type,\n      message: error,\n      statusCode,\n      timestamp: new Date().toISOString()\n    }\n  };\n}\n\n/**\n * Funci√≥n helper para logging de eventos de autenticaci√≥n\n */\nexport function logAuthEvent(\n  event: string,\n  userId?: string,\n  metadata?: Record<string, any>\n): void {\n  const logData = {\n    event,\n    userId,\n    timestamp: new Date().toISOString(),\n    metadata\n  };\n  \n  console.log(`üîê Auth Event: ${JSON.stringify(logData)}`);\n}\n\n/**\n * Funci√≥n helper para extraer IP del request (framework agn√≥stico)\n */\nexport function extractClientIP(headers: Record<string, string>): string {\n  return (\n    headers['x-forwarded-for'] ||\n    headers['x-real-ip'] ||\n    headers['x-client-ip'] ||\n    headers['cf-connecting-ip'] ||\n    'unknown'\n  );\n}\n\n/**\n * Funci√≥n helper para extraer User-Agent del request\n */\nexport function extractUserAgent(headers: Record<string, string>): string {\n  return headers['user-agent'] || 'unknown';\n}",
    "// src/adapters/hono.ts\nimport { Context, Next } from 'hono';\nimport { \n  authenticateRequest, \n  AuthMiddlewareConfig, \n  getCurrentUser,\n  createEmptyAuthContext,\n  logAuthEvent,\n  extractClientIP,\n  extractUserAgent\n} from '../middleware/auth';\nimport type { AuthContext, AuthRequest } from '../types/auth';\n\n/**\n * Extiende el contexto de Hono para incluir autenticaci√≥n\n */\ndeclare module 'hono' {\n  interface ContextVariableMap {\n    auth: AuthContext;\n  }\n}\n\n/**\n * Adaptador de middleware de autenticaci√≥n para Hono\n * @param config Configuraci√≥n del middleware\n * @returns Middleware de Hono\n */\nexport function honoAuthMiddleware(config: AuthMiddlewareConfig = {}) {\n  return async (c: Context, next: Next) => {\n    try {\n      // Verificar si la ruta debe ser saltada\n      if (config.skipPaths && config.skipPaths.includes(c.req.path)) {\n        c.set('auth', createEmptyAuthContext());\n        await next();\n        return;\n      }\n\n      // Convertir request de Hono a formato agn√≥stico\n      const authRequest: AuthRequest = {\n        headers: Object.fromEntries(c.req.header())\n      };\n\n      // Ejecutar autenticaci√≥n\n      const result = await authenticateRequest(authRequest, config);\n\n      if (!result.success) {\n        // Log del evento de fallo de autenticaci√≥n\n        logAuthEvent('auth.failed', undefined, {\n          path: c.req.path,\n          method: c.req.method,\n          ip: extractClientIP(authRequest.headers),\n          userAgent: extractUserAgent(authRequest.headers),\n          error: result.error\n        });\n\n        return c.json(\n          {\n            error: result.error,\n            timestamp: new Date().toISOString()\n          },\n          result.statusCode || 401\n        );\n      }\n\n      // Establecer contexto de autenticaci√≥n en Hono\n      c.set('auth', result.context!);\n\n      // Log del evento de autenticaci√≥n exitosa\n      if (result.context?.user) {\n        logAuthEvent('auth.success', result.context.user.id, {\n          path: c.req.path,\n          method: c.req.method,\n          ip: extractClientIP(authRequest.headers),\n          userAgent: extractUserAgent(authRequest.headers)\n        });\n      }\n\n      await next();\n    } catch (error:any) {\n      console.error('Hono auth middleware error:', error);\n      return c.json(\n        {\n          error: 'Internal authentication error',\n          timestamp: new Date().toISOString()\n        },\n        500\n      );\n    }\n  };\n}\n\n/**\n * Middleware de autenticaci√≥n opcional para Hono\n * No falla si no hay token, pero lo procesa si est√° presente\n */\nexport function honoOptionalAuth() {\n  return honoAuthMiddleware({ required: false });\n}\n\n/**\n * Middleware que requiere autenticaci√≥n para Hono\n */\nexport function honoRequireAuth() {\n  return honoAuthMiddleware({ required: true });\n}\n\n/**\n * Middleware que requiere permisos espec√≠ficos para Hono\n * @param permissions Array de permisos requeridos\n * @param requireAll Si se requieren todos los permisos (default: false)\n */\nexport function honoRequirePermissions(\n  permissions: string[],\n  requireAll: boolean = false\n) {\n  return honoAuthMiddleware({\n    required: true,\n    permissions,\n    permissionOptions: { requireAll }\n  });\n}\n\n/**\n * Middleware que requiere roles espec√≠ficos para Hono\n * @param roles Array de roles requeridos\n */\nexport function honoRequireRoles(roles: string[]) {\n  return async (c: Context, next: Next) => {\n    const authContext = c.get('auth');\n    \n    if (!authContext?.user) {\n      return c.json(\n        {\n          error: 'Authentication required',\n          timestamp: new Date().toISOString()\n        },\n        401\n      );\n    }\n\n    const userRoles = authContext.user.roles.map(role => role.name);\n    const hasRequiredRole = roles.some(role => userRoles.includes(role));\n\n    if (!hasRequiredRole) {\n      logAuthEvent('auth.insufficient_roles', authContext.user.id, {\n        requiredRoles: roles,\n        userRoles,\n        path: c.req.path\n      });\n\n      return c.json(\n        {\n          error: `Insufficient roles. Required: ${roles.join(', ')}`,\n          timestamp: new Date().toISOString()\n        },\n        403\n      );\n    }\n\n    await next();\n  };\n}\n\n/**\n * Middleware que requiere ser admin para Hono\n */\nexport function honoRequireAdmin() {\n  return honoRequireRoles(['admin', 'administrator']);\n}\n\n/**\n * Middleware que requiere ser moderador o admin para Hono\n */\nexport function honoRequireModerator() {\n  return honoRequireRoles(['moderator', 'admin', 'administrator']);\n}\n\n/**\n * Helper para obtener el usuario actual del contexto de Hono\n * @param c Contexto de Hono\n * @returns Usuario actual o null\n */\nexport function getHonoCurrentUser(c: Context) {\n  const authContext = c.get('auth');\n  return getCurrentUser(authContext);\n}\n\n/**\n * Helper para verificar si el usuario est√° autenticado en Hono\n * @param c Contexto de Hono\n * @returns true si est√° autenticado\n */\nexport function isHonoAuthenticated(c: Context): boolean {\n  const authContext = c.get('auth');\n  return !!authContext?.user;\n}\n\n/**\n * Helper para obtener el contexto de autenticaci√≥n completo en Hono\n * @param c Contexto de Hono\n * @returns Contexto de autenticaci√≥n\n */\nexport function getHonoAuthContext(c: Context): AuthContext {\n  return c.get('auth') || createEmptyAuthContext();\n}\n\n/**\n * Middleware para validar ownership de recursos en Hono\n * @param getUserIdFromParams Funci√≥n para extraer el ID del usuario del recurso\n */\nexport function honoRequireOwnership(\n  getUserIdFromParams: (c: Context) => string\n) {\n  return async (c: Context, next: Next) => {\n    const authContext = c.get('auth');\n    \n    if (!authContext?.user) {\n      return c.json(\n        {\n          error: 'Authentication required',\n          timestamp: new Date().toISOString()\n        },\n        401\n      );\n    }\n\n    const resourceUserId = getUserIdFromParams(c);\n    const isOwner = authContext.user.id === resourceUserId;\n    const isAdmin = authContext.user.roles.some(role => \n      ['admin', 'administrator'].includes(role.name)\n    );\n\n    if (!isOwner && !isAdmin) {\n      logAuthEvent('auth.insufficient_ownership', authContext.user.id, {\n        resourceUserId,\n        path: c.req.path\n      });\n\n      return c.json(\n        {\n          error: 'Insufficient permissions. You can only access your own resources.',\n          timestamp: new Date().toISOString()\n        },\n        403\n      );\n    }\n\n    await next();\n  };\n}\n\n/**\n * Middleware para rate limiting b√°sico en Hono\n * @param maxRequests M√°ximo n√∫mero de requests\n * @param windowMs Ventana de tiempo en milisegundos\n */\nexport function honoRateLimit(\n  maxRequests: number = 100,\n  windowMs: number = 15 * 60 * 1000 // 15 minutos\n) {\n  const requests = new Map<string, { count: number; resetTime: number }>();\n\n  return async (c: Context, next: Next) => {\n    const authContext = c.get('auth');\n    const clientId = authContext?.user?.id || extractClientIP(Object.fromEntries(c.req.header()));\n    const now = Date.now();\n    \n    const clientData = requests.get(clientId);\n    \n    if (!clientData || now > clientData.resetTime) {\n      requests.set(clientId, {\n        count: 1,\n        resetTime: now + windowMs\n      });\n    } else {\n      clientData.count++;\n      \n      if (clientData.count > maxRequests) {\n        return c.json(\n          {\n            error: 'Rate limit exceeded',\n            retryAfter: Math.ceil((clientData.resetTime - now) / 1000),\n            timestamp: new Date().toISOString()\n          },\n          429\n        );\n      }\n    }\n\n    await next();\n  };\n}\n\n/**\n * Middleware para CORS en Hono con autenticaci√≥n\n * @param origins Or√≠genes permitidos\n */\nexport function honoCorsAuth(origins: string[] = ['*']) {\n  return async (c: Context, next: Next) => {\n    const origin = c.req.header('origin');\n    \n    if (origins.includes('*') || (origin && origins.includes(origin))) {\n      c.header('Access-Control-Allow-Origin', origin || '*');\n      c.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n      c.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n      c.header('Access-Control-Allow-Credentials', 'true');\n    }\n\n    if (c.req.method === 'OPTIONS') {\n      return c.text('', 204);\n    }\n\n    await next();\n  };\n}\n\n/**\n * Helper para crear respuestas de error estandarizadas en Hono\n * @param c Contexto de Hono\n * @param error Mensaje de error\n * @param statusCode C√≥digo de estado HTTP\n */\nexport function honoErrorResponse(\n  c: Context,\n  error: string,\n  statusCode: number = 400\n) {\n  return c.json(\n    {\n      error,\n      timestamp: new Date().toISOString(),\n      path: c.req.path,\n      method: c.req.method\n    },\n    statusCode\n  );\n}\n\n/**\n * Helper para crear respuestas de √©xito estandarizadas en Hono\n * @param c Contexto de Hono\n * @param data Datos de respuesta\n * @param message Mensaje opcional\n * @param statusCode C√≥digo de estado HTTP\n */\nexport function honoSuccessResponse(\n  c: Context,\n  data: any,\n  message?: string,\n  statusCode: number = 200\n) {\n  const response: any = {\n    success: true,\n    data,\n    timestamp: new Date().toISOString()\n  };\n\n  if (message) {\n    response.message = message;\n  }\n\n  return c.json(response, statusCode);\n}\n\n/**\n * Middleware para logging de requests autenticados en Hono\n */\nexport function honoAuthLogger() {\n  return async (c: Context, next: Next) => {\n    const start = Date.now();\n    const authContext = c.get('auth');\n    \n    await next();\n    \n    const duration = Date.now() - start;\n    const logData = {\n      method: c.req.method,\n      path: c.req.path,\n      status: c.res.status,\n      duration: `${duration}ms`,\n      userId: authContext?.user?.id,\n      ip: extractClientIP(Object.fromEntries(c.req.header())),\n      userAgent: extractUserAgent(Object.fromEntries(c.req.header()))\n    };\n    \n    console.log(`üìù Request: ${JSON.stringify(logData)}`);\n  };\n}",
    "// src/adapters/express.ts\nimport { Request, Response, NextFunction } from 'express';\nimport { \n  authenticateRequest, \n  AuthMiddlewareConfig, \n  getCurrentUser,\n  createEmptyAuthContext,\n  logAuthEvent,\n  extractClientIP,\n  extractUserAgent\n} from '../middleware/auth';\nimport type { AuthContext, AuthRequest } from '../types/auth';\n\n/**\n * Extiende el tipo Request de Express para incluir autenticaci√≥n\n */\ndeclare global {\n  namespace Express {\n    interface Request {\n      auth?: AuthContext;\n    }\n  }\n}\n\n/**\n * Adaptador de middleware de autenticaci√≥n para Express\n * @param config Configuraci√≥n del middleware\n * @returns Middleware de Express\n */\nexport function expressAuthMiddleware(config: AuthMiddlewareConfig = {}) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      // Verificar si la ruta debe ser saltada\n      if (config.skipPaths && config.skipPaths.includes(req.path)) {\n        req.auth = createEmptyAuthContext();\n        return next();\n      }\n\n      // Convertir request de Express a formato agn√≥stico\n      const authRequest: AuthRequest = {\n        headers: req.headers as Record<string, string>\n      };\n\n      // Ejecutar autenticaci√≥n\n      const result = await authenticateRequest(authRequest, config);\n\n      if (!result.success) {\n        // Log del evento de fallo de autenticaci√≥n\n        logAuthEvent('auth.failed', undefined, {\n          path: req.path,\n          method: req.method,\n          ip: extractClientIP(authRequest.headers),\n          userAgent: extractUserAgent(authRequest.headers),\n          error: result.error\n        });\n\n        return res.status(result.statusCode || 401).json({\n          error: result.error,\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      // Establecer contexto de autenticaci√≥n en Express\n      req.auth = result.context!;\n\n      // Log del evento de autenticaci√≥n exitosa\n      if (result.context?.user) {\n        logAuthEvent('auth.success', result.context.user.id, {\n          path: req.path,\n          method: req.method,\n          ip: extractClientIP(authRequest.headers),\n          userAgent: extractUserAgent(authRequest.headers)\n        });\n      }\n\n      next();\n    } catch (error:any) {\n      console.error('Express auth middleware error:', error);\n      return res.status(500).json({\n        error: 'Internal authentication error',\n        timestamp: new Date().toISOString()\n      });\n    }\n  };\n}\n\n/**\n * Middleware de autenticaci√≥n opcional para Express\n * No falla si no hay token, pero lo procesa si est√° presente\n */\nexport function expressOptionalAuth() {\n  return expressAuthMiddleware({ required: false });\n}\n\n/**\n * Middleware que requiere autenticaci√≥n para Express\n */\nexport function expressRequireAuth() {\n  return expressAuthMiddleware({ required: true });\n}\n\n/**\n * Middleware que requiere permisos espec√≠ficos para Express\n * @param permissions Array de permisos requeridos\n * @param requireAll Si se requieren todos los permisos (default: false)\n */\nexport function expressRequirePermissions(\n  permissions: string[],\n  requireAll: boolean = false\n) {\n  return expressAuthMiddleware({\n    required: true,\n    permissions,\n    permissionOptions: { requireAll }\n  });\n}\n\n/**\n * Middleware que requiere roles espec√≠ficos para Express\n * @param roles Array de roles requeridos\n */\nexport function expressRequireRoles(roles: string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const authContext = req.auth;\n    \n    if (!authContext?.user) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    const userRoles = authContext.user.roles.map(role => role.name);\n    const hasRequiredRole = roles.some(role => userRoles.includes(role));\n\n    if (!hasRequiredRole) {\n      logAuthEvent('auth.insufficient_roles', authContext.user.id, {\n        requiredRoles: roles,\n        userRoles,\n        path: req.path\n      });\n\n      return res.status(403).json({\n        error: `Insufficient roles. Required: ${roles.join(', ')}`,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    next();\n  };\n}\n\n/**\n * Middleware que requiere ser admin para Express\n */\nexport function expressRequireAdmin() {\n  return expressRequireRoles(['admin', 'administrator']);\n}\n\n/**\n * Middleware que requiere ser moderador o admin para Express\n */\nexport function expressRequireModerator() {\n  return expressRequireRoles(['moderator', 'admin', 'administrator']);\n}\n\n/**\n * Helper para obtener el usuario actual del request de Express\n * @param req Request de Express\n * @returns Usuario actual o null\n */\nexport function getExpressCurrentUser(req: Request) {\n  return getCurrentUser(req.auth);\n}\n\n/**\n * Helper para verificar si el usuario est√° autenticado en Express\n * @param req Request de Express\n * @returns true si est√° autenticado\n */\nexport function isExpressAuthenticated(req: Request): boolean {\n  return !!req.auth?.user;\n}\n\n/**\n * Helper para obtener el contexto de autenticaci√≥n completo en Express\n * @param req Request de Express\n * @returns Contexto de autenticaci√≥n\n */\nexport function getExpressAuthContext(req: Request): AuthContext {\n  return req.auth || createEmptyAuthContext();\n}\n\n/**\n * Middleware para validar ownership de recursos en Express\n * @param getUserIdFromParams Funci√≥n para extraer el ID del usuario del recurso\n */\nexport function expressRequireOwnership(\n  getUserIdFromParams: (req: Request) => string\n) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const authContext = req.auth;\n    \n    if (!authContext?.user) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    const resourceUserId = getUserIdFromParams(req);\n    const isOwner = authContext.user.id === resourceUserId;\n    const isAdmin = authContext.user.roles.some(role => \n      ['admin', 'administrator'].includes(role.name)\n    );\n\n    if (!isOwner && !isAdmin) {\n      logAuthEvent('auth.insufficient_ownership', authContext.user.id, {\n        resourceUserId,\n        path: req.path\n      });\n\n      return res.status(403).json({\n        error: 'Insufficient permissions. You can only access your own resources.',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    next();\n  };\n}\n\n/**\n * Middleware para rate limiting b√°sico en Express\n * @param maxRequests M√°ximo n√∫mero de requests\n * @param windowMs Ventana de tiempo en milisegundos\n */\nexport function expressRateLimit(\n  maxRequests: number = 100,\n  windowMs: number = 15 * 60 * 1000 // 15 minutos\n) {\n  const requests = new Map<string, { count: number; resetTime: number }>();\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    const authContext = req.auth;\n    const clientId = authContext?.user?.id || extractClientIP(req.headers as Record<string, string>);\n    const now = Date.now();\n    \n    const clientData = requests.get(clientId);\n    \n    if (!clientData || now > clientData.resetTime) {\n      requests.set(clientId, {\n        count: 1,\n        resetTime: now + windowMs\n      });\n    } else {\n      clientData.count++;\n      \n      if (clientData.count > maxRequests) {\n        return res.status(429).json({\n          error: 'Rate limit exceeded',\n          retryAfter: Math.ceil((clientData.resetTime - now) / 1000),\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n\n    next();\n  };\n}\n\n/**\n * Middleware para CORS en Express con autenticaci√≥n\n * @param origins Or√≠genes permitidos\n */\nexport function expressCorsAuth(origins: string[] = ['*']) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const origin = req.headers.origin;\n    \n    if (origins.includes('*') || (origin && origins.includes(origin))) {\n      res.header('Access-Control-Allow-Origin', origin || '*');\n      res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n      res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n      res.header('Access-Control-Allow-Credentials', 'true');\n    }\n\n    if (req.method === 'OPTIONS') {\n      return res.sendStatus(204);\n    }\n\n    next();\n  };\n}\n\n/**\n * Helper para crear respuestas de error estandarizadas en Express\n * @param res Response de Express\n * @param error Mensaje de error\n * @param statusCode C√≥digo de estado HTTP\n */\nexport function expressErrorResponse(\n  res: Response,\n  error: string,\n  statusCode: number = 400\n) {\n  return res.status(statusCode).json({\n    error,\n    timestamp: new Date().toISOString()\n  });\n}\n\n/**\n * Helper para crear respuestas de √©xito estandarizadas en Express\n * @param res Response de Express\n * @param data Datos de respuesta\n * @param message Mensaje opcional\n * @param statusCode C√≥digo de estado HTTP\n */\nexport function expressSuccessResponse(\n  res: Response,\n  data: any,\n  message?: string,\n  statusCode: number = 200\n) {\n  const response: any = {\n    success: true,\n    data,\n    timestamp: new Date().toISOString()\n  };\n\n  if (message) {\n    response.message = message;\n  }\n\n  return res.status(statusCode).json(response);\n}\n\n/**\n * Middleware para logging de requests autenticados en Express\n */\nexport function expressAuthLogger() {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const start = Date.now();\n    const authContext = req.auth;\n    \n    res.on('finish', () => {\n      const duration = Date.now() - start;\n      const logData = {\n        method: req.method,\n        path: req.path,\n        status: res.statusCode,\n        duration: `${duration}ms`,\n        userId: authContext?.user?.id,\n        ip: extractClientIP(req.headers as Record<string, string>),\n        userAgent: extractUserAgent(req.headers as Record<string, string>)\n      };\n      \n      console.log(`üìù Request: ${JSON.stringify(logData)}`);\n    });\n    \n    next();\n  };\n}\n\n/**\n * Middleware de manejo de errores para Express con autenticaci√≥n\n */\nexport function expressAuthErrorHandler() {\n  return (error: any, req: Request, res: Response, next: NextFunction) => {\n    console.error('Express auth error:', error);\n    \n    // Log del error con contexto de autenticaci√≥n\n    const authContext = req.auth;\n    logAuthEvent('auth.error', authContext?.user?.id, {\n      error: error.message,\n      stack: error.stack,\n      path: req.path,\n      method: req.method\n    });\n\n    // Determinar c√≥digo de estado basado en el tipo de error\n    let statusCode = 500;\n    let message = 'Internal server error';\n\n    if (error.name === 'ValidationError') {\n      statusCode = 400;\n      message = 'Validation error';\n    } else if (error.name === 'UnauthorizedError') {\n      statusCode = 401;\n      message = 'Unauthorized';\n    } else if (error.name === 'ForbiddenError') {\n      statusCode = 403;\n      message = 'Forbidden';\n    }\n\n    res.status(statusCode).json({\n      error: message,\n      timestamp: new Date().toISOString(),\n      ...(process.env.NODE_ENV === 'development' && { details: error.message })\n    });\n  };\n}\n\n/**\n * Middleware para validaci√≥n de JSON en Express\n */\nexport function expressJsonValidator() {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (req.headers['content-type']?.includes('application/json')) {\n      try {\n        if (req.body && typeof req.body === 'string') {\n          req.body = JSON.parse(req.body);\n        }\n      } catch (error:any) {\n        return res.status(400).json({\n          error: 'Invalid JSON format',\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n    next();\n  };\n}\n\n/**\n * Middleware para sanitizaci√≥n de datos en Express\n */\nexport function expressSanitizer() {\n  return (req: Request, res: Response, next: NextFunction) => {\n    // Sanitizar query parameters\n    if (req.query) {\n      for (const key in req.query) {\n        if (typeof req.query[key] === 'string') {\n          req.query[key] = (req.query[key] as string)\n            .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n            .replace(/<[^>]*>/g, '')\n            .trim();\n        }\n      }\n    }\n\n    // Sanitizar body\n    if (req.body && typeof req.body === 'object') {\n      sanitizeObject(req.body);\n    }\n\n    next();\n  };\n}\n\n/**\n * Funci√≥n helper para sanitizar objetos recursivamente\n */\nfunction sanitizeObject(obj: any): void {\n  for (const key in obj) {\n    if (typeof obj[key] === 'string') {\n      obj[key] = obj[key]\n        .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n        .replace(/<[^>]*>/g, '')\n        .trim();\n    } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n      sanitizeObject(obj[key]);\n    }\n  }\n}",
    "// src/adapters/websocket.ts\nimport { WebSocket } from 'ws';\nimport { \n  authenticateRequest, \n  AuthMiddlewareConfig, \n  getCurrentUser,\n  createEmptyAuthContext,\n  logAuthEvent,\n  extractClientIP,\n  extractUserAgent\n} from '../middleware/auth';\nimport type { AuthContext, AuthRequest, User } from '../types/auth';\n\n/**\n * Interfaz para WebSocket con autenticaci√≥n\n */\nexport interface AuthenticatedWebSocket extends WebSocket {\n  auth?: AuthContext;\n  userId?: string;\n  sessionId?: string;\n  lastActivity?: Date;\n}\n\n/**\n * Configuraci√≥n para el servidor WebSocket con autenticaci√≥n\n */\nexport interface WebSocketAuthConfig extends AuthMiddlewareConfig {\n  heartbeatInterval?: number; // Intervalo de heartbeat en ms\n  sessionTimeout?: number; // Timeout de sesi√≥n en ms\n  maxConnections?: number; // M√°ximo de conexiones por usuario\n}\n\n/**\n * Mapa de conexiones activas por usuario\n */\nconst activeConnections = new Map<string, Set<AuthenticatedWebSocket>>();\nconst connectionsBySession = new Map<string, AuthenticatedWebSocket>();\n\n/**\n * Middleware de autenticaci√≥n para WebSockets\n * @param ws WebSocket connection\n * @param request Request inicial\n * @param config Configuraci√≥n de autenticaci√≥n\n * @returns Promise<boolean> true si la autenticaci√≥n es exitosa\n */\nexport async function authenticateWebSocket(\n  ws: AuthenticatedWebSocket,\n  request: any,\n  config: WebSocketAuthConfig = {}\n): Promise<boolean> {\n  try {\n    // Extraer token de la query string o headers\n    const url = new URL(request.url, 'http://localhost');\n    const token = url.searchParams.get('token') || request.headers.authorization?.replace('Bearer ', '');\n\n    if (!token && config.required !== false) {\n      ws.close(1008, 'Authentication required');\n      return false;\n    }\n\n    // Convertir request a formato agn√≥stico\n    const authRequest: AuthRequest = {\n      headers: {\n        ...request.headers,\n        authorization: token ? `Bearer ${token}` : undefined\n      }\n    };\n\n    // Ejecutar autenticaci√≥n\n    const result = await authenticateRequest(authRequest, config);\n\n    if (!result.success) {\n      logAuthEvent('websocket.auth.failed', undefined, {\n        ip: extractClientIP(authRequest.headers),\n        userAgent: extractUserAgent(authRequest.headers),\n        error: result.error\n      });\n\n      ws.close(1008, result.error || 'Authentication failed');\n      return false;\n    }\n\n    // Establecer contexto de autenticaci√≥n\n    ws.auth = result.context!;\n    ws.userId = result.context?.user?.id;\n    ws.sessionId = generateSessionId();\n    ws.lastActivity = new Date();\n\n    // Verificar l√≠mite de conexiones por usuario\n    if (ws.userId && config.maxConnections) {\n      const userConnections = activeConnections.get(ws.userId) || new Set();\n      if (userConnections.size >= config.maxConnections) {\n        ws.close(1008, 'Maximum connections exceeded');\n        return false;\n      }\n    }\n\n    // Registrar conexi√≥n\n    if (ws.userId) {\n      registerConnection(ws);\n      \n      logAuthEvent('websocket.connected', ws.userId, {\n        sessionId: ws.sessionId,\n        ip: extractClientIP(authRequest.headers),\n        userAgent: extractUserAgent(authRequest.headers)\n      });\n    }\n\n    // Configurar heartbeat si est√° habilitado\n    if (config.heartbeatInterval) {\n      setupHeartbeat(ws, config.heartbeatInterval);\n    }\n\n    // Configurar timeout de sesi√≥n\n    if (config.sessionTimeout) {\n      setupSessionTimeout(ws, config.sessionTimeout);\n    }\n\n    return true;\n  } catch (error:any) {\n    console.error('WebSocket authentication error:', error);\n    ws.close(1011, 'Internal authentication error');\n    return false;\n  }\n}\n\n/**\n * Middleware para verificar permisos en mensajes WebSocket\n * @param ws WebSocket autenticado\n * @param permissions Permisos requeridos\n * @param requireAll Si se requieren todos los permisos\n * @returns boolean\n */\nexport function checkWebSocketPermissions(\n  ws: AuthenticatedWebSocket,\n  permissions: string[],\n  requireAll: boolean = false\n): boolean {\n  if (!ws.auth?.user) {\n    return false;\n  }\n\n  const userPermissions = ws.auth.user.roles.flatMap(role => role.permissions.map(p => p.name));\n  \n  if (requireAll) {\n    return permissions.every(permission => userPermissions.includes(permission));\n  } else {\n    return permissions.some(permission => userPermissions.includes(permission));\n  }\n}\n\n/**\n * Verificar si el usuario tiene roles espec√≠ficos\n * @param ws WebSocket autenticado\n * @param roles Roles requeridos\n * @returns boolean\n */\nexport function checkWebSocketRoles(\n  ws: AuthenticatedWebSocket,\n  roles: string[]\n): boolean {\n  if (!ws.auth?.user) {\n    return false;\n  }\n\n  const userRoles = ws.auth.user.roles.map(role => role.name);\n  return roles.some(role => userRoles.includes(role));\n}\n\n/**\n * Obtener el usuario actual del WebSocket\n * @param ws WebSocket autenticado\n * @returns Usuario actual o null\n */\nexport function getWebSocketCurrentUser(ws: AuthenticatedWebSocket): User | null {\n  return getCurrentUser(ws.auth);\n}\n\n/**\n * Verificar si el WebSocket est√° autenticado\n * @param ws WebSocket\n * @returns boolean\n */\nexport function isWebSocketAuthenticated(ws: AuthenticatedWebSocket): boolean {\n  return !!ws.auth?.user;\n}\n\n/**\n * Obtener el contexto de autenticaci√≥n del WebSocket\n * @param ws WebSocket\n * @returns Contexto de autenticaci√≥n\n */\nexport function getWebSocketAuthContext(ws: AuthenticatedWebSocket): AuthContext {\n  return ws.auth || createEmptyAuthContext();\n}\n\n/**\n * Enviar mensaje a un usuario espec√≠fico\n * @param userId ID del usuario\n * @param message Mensaje a enviar\n * @param excludeSession Sesi√≥n a excluir (opcional)\n */\nexport function sendToUser(\n  userId: string,\n  message: any,\n  excludeSession?: string\n): void {\n  const userConnections = activeConnections.get(userId);\n  if (!userConnections) return;\n\n  const messageStr = typeof message === 'string' ? message : JSON.stringify(message);\n  \n  userConnections.forEach(ws => {\n    if (excludeSession && ws.sessionId === excludeSession) return;\n    \n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(messageStr);\n    }\n  });\n}\n\n/**\n * Enviar mensaje a usuarios con permisos espec√≠ficos\n * @param permissions Permisos requeridos\n * @param message Mensaje a enviar\n * @param requireAll Si se requieren todos los permisos\n */\nexport function sendToUsersWithPermissions(\n  permissions: string[],\n  message: any,\n  requireAll: boolean = false\n): void {\n  const messageStr = typeof message === 'string' ? message : JSON.stringify(message);\n  \n  activeConnections.forEach((connections, userId) => {\n    connections.forEach(ws => {\n      if (ws.readyState === WebSocket.OPEN && \n          checkWebSocketPermissions(ws, permissions, requireAll)) {\n        ws.send(messageStr);\n      }\n    });\n  });\n}\n\n/**\n * Enviar mensaje a usuarios con roles espec√≠ficos\n * @param roles Roles requeridos\n * @param message Mensaje a enviar\n */\nexport function sendToUsersWithRoles(\n  roles: string[],\n  message: any\n): void {\n  const messageStr = typeof message === 'string' ? message : JSON.stringify(message);\n  \n  activeConnections.forEach((connections, userId) => {\n    connections.forEach(ws => {\n      if (ws.readyState === WebSocket.OPEN && \n          checkWebSocketRoles(ws, roles)) {\n        ws.send(messageStr);\n      }\n    });\n  });\n}\n\n/**\n * Broadcast a todas las conexiones autenticadas\n * @param message Mensaje a enviar\n * @param excludeUser Usuario a excluir (opcional)\n */\nexport function broadcastToAuthenticated(\n  message: any,\n  excludeUser?: string\n): void {\n  const messageStr = typeof message === 'string' ? message : JSON.stringify(message);\n  \n  activeConnections.forEach((connections, userId) => {\n    if (excludeUser && userId === excludeUser) return;\n    \n    connections.forEach(ws => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(messageStr);\n      }\n    });\n  });\n}\n\n/**\n * Obtener estad√≠sticas de conexiones\n * @returns Estad√≠sticas de conexiones\n */\nexport function getConnectionStats() {\n  let totalConnections = 0;\n  const userStats: Record<string, number> = {};\n  \n  activeConnections.forEach((connections, userId) => {\n    const activeCount = Array.from(connections).filter(\n      ws => ws.readyState === WebSocket.OPEN\n    ).length;\n    \n    totalConnections += activeCount;\n    userStats[userId] = activeCount;\n  });\n  \n  return {\n    totalConnections,\n    uniqueUsers: activeConnections.size,\n    userStats\n  };\n}\n\n/**\n * Desconectar todas las sesiones de un usuario\n * @param userId ID del usuario\n * @param reason Raz√≥n de la desconexi√≥n\n */\nexport function disconnectUser(userId: string, reason: string = 'User disconnected'): void {\n  const userConnections = activeConnections.get(userId);\n  if (!userConnections) return;\n  \n  userConnections.forEach(ws => {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.close(1000, reason);\n    }\n  });\n  \n  logAuthEvent('websocket.user_disconnected', userId, { reason });\n}\n\n/**\n * Limpiar conexiones inactivas\n */\nexport function cleanupInactiveConnections(): void {\n  const now = new Date();\n  const inactiveThreshold = 30 * 60 * 1000; // 30 minutos\n  \n  activeConnections.forEach((connections, userId) => {\n    connections.forEach(ws => {\n      if (ws.readyState !== WebSocket.OPEN || \n          (ws.lastActivity && now.getTime() - ws.lastActivity.getTime() > inactiveThreshold)) {\n        unregisterConnection(ws);\n      }\n    });\n  });\n}\n\n/**\n * Registrar una nueva conexi√≥n\n * @param ws WebSocket autenticado\n */\nfunction registerConnection(ws: AuthenticatedWebSocket): void {\n  if (!ws.userId || !ws.sessionId) return;\n  \n  // Agregar a conexiones por usuario\n  if (!activeConnections.has(ws.userId)) {\n    activeConnections.set(ws.userId, new Set());\n  }\n  activeConnections.get(ws.userId)!.add(ws);\n  \n  // Agregar a conexiones por sesi√≥n\n  connectionsBySession.set(ws.sessionId, ws);\n  \n  // Configurar cleanup al cerrar\n  ws.on('close', () => unregisterConnection(ws));\n  ws.on('error', () => unregisterConnection(ws));\n}\n\n/**\n * Desregistrar una conexi√≥n\n * @param ws WebSocket autenticado\n */\nfunction unregisterConnection(ws: AuthenticatedWebSocket): void {\n  if (ws.userId) {\n    const userConnections = activeConnections.get(ws.userId);\n    if (userConnections) {\n      userConnections.delete(ws);\n      if (userConnections.size === 0) {\n        activeConnections.delete(ws.userId);\n      }\n    }\n    \n    logAuthEvent('websocket.disconnected', ws.userId, {\n      sessionId: ws.sessionId\n    });\n  }\n  \n  if (ws.sessionId) {\n    connectionsBySession.delete(ws.sessionId);\n  }\n}\n\n/**\n * Configurar heartbeat para mantener la conexi√≥n viva\n * @param ws WebSocket\n * @param interval Intervalo en milisegundos\n */\nfunction setupHeartbeat(ws: AuthenticatedWebSocket, interval: number): void {\n  const heartbeatTimer = setInterval(() => {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.ping();\n      ws.lastActivity = new Date();\n    } else {\n      clearInterval(heartbeatTimer);\n    }\n  }, interval);\n  \n  ws.on('pong', () => {\n    ws.lastActivity = new Date();\n  });\n  \n  ws.on('close', () => {\n    clearInterval(heartbeatTimer);\n  });\n}\n\n/**\n * Configurar timeout de sesi√≥n\n * @param ws WebSocket\n * @param timeout Timeout en milisegundos\n */\nfunction setupSessionTimeout(ws: AuthenticatedWebSocket, timeout: number): void {\n  const timeoutTimer = setTimeout(() => {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.close(1000, 'Session timeout');\n    }\n  }, timeout);\n  \n  ws.on('message', () => {\n    ws.lastActivity = new Date();\n  });\n  \n  ws.on('close', () => {\n    clearTimeout(timeoutTimer);\n  });\n}\n\n/**\n * Generar ID de sesi√≥n √∫nico\n * @returns String √∫nico para la sesi√≥n\n */\nfunction generateSessionId(): string {\n  return `ws_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Middleware para manejar mensajes WebSocket con autenticaci√≥n\n * @param ws WebSocket autenticado\n * @param message Mensaje recibido\n * @param permissions Permisos requeridos para procesar el mensaje\n * @returns boolean true si el mensaje puede ser procesado\n */\nexport function handleAuthenticatedMessage(\n  ws: AuthenticatedWebSocket,\n  message: any,\n  permissions?: string[]\n): boolean {\n  // Actualizar √∫ltima actividad\n  ws.lastActivity = new Date();\n  \n  // Verificar autenticaci√≥n\n  if (!isWebSocketAuthenticated(ws)) {\n    ws.send(JSON.stringify({\n      type: 'error',\n      message: 'Authentication required',\n      timestamp: new Date().toISOString()\n    }));\n    return false;\n  }\n  \n  // Verificar permisos si se especifican\n  if (permissions && !checkWebSocketPermissions(ws, permissions)) {\n    ws.send(JSON.stringify({\n      type: 'error',\n      message: 'Insufficient permissions',\n      timestamp: new Date().toISOString()\n    }));\n    \n    logAuthEvent('websocket.insufficient_permissions', ws.userId, {\n      requiredPermissions: permissions,\n      sessionId: ws.sessionId\n    });\n    \n    return false;\n  }\n  \n  return true;\n}\n\n/**\n * Crear respuesta estandarizada para WebSocket\n * @param type Tipo de respuesta\n * @param data Datos de respuesta\n * @param message Mensaje opcional\n * @returns Objeto de respuesta\n */\nexport function createWebSocketResponse(\n  type: 'success' | 'error' | 'info',\n  data?: any,\n  message?: string\n) {\n  return {\n    type,\n    data,\n    message,\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Inicializar limpieza autom√°tica de conexiones\n * @param interval Intervalo de limpieza en milisegundos\n */\nexport function initializeConnectionCleanup(interval: number = 5 * 60 * 1000): void {\n  setInterval(() => {\n    cleanupInactiveConnections();\n  }, interval);\n}",
    "// src/db/migrations.ts\nimport { getDatabase } from './connection';\nimport type { Database } from 'bun:sqlite';\n\n/**\n * Interface para definir una migraci√≥n\n */\nexport interface Migration {\n  version: number;\n  name: string;\n  up: (db: Database) => Promise<void>;\n  down: (db: Database) => Promise<void>;\n}\n\n/**\n * Lista de todas las migraciones en orden\n */\nconst migrations: Migration[] = [\n  {\n    version: 1,\n    name: 'create_users_table',\n    up: async (db: Database) => {\n      db.exec(`\n        CREATE TABLE IF NOT EXISTS users (\n          id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n          email TEXT UNIQUE NOT NULL,\n          password_hash TEXT NOT NULL,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          is_active BOOLEAN DEFAULT 1\n        )\n      `);\n      \n      // √çndices para optimizar consultas\n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)\");\n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_users_active ON users(is_active)\");\n      \n      console.log('‚úÖ Tabla users creada');\n    },\n    down: async (db: Database) => {\n      db.exec(\"DROP TABLE IF EXISTS users\");\n      console.log('‚úÖ Tabla users eliminada');\n    }\n  },\n  \n  {\n    version: 2,\n    name: 'create_roles_table',\n    up: async (db: Database) => {\n      db.exec(`\n        CREATE TABLE IF NOT EXISTS roles (\n          id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n          name TEXT UNIQUE NOT NULL,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n      \n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_roles_name ON roles(name)\");\n      \n      console.log('‚úÖ Tabla roles creada');\n    },\n    down: async (db: Database) => {\n      db.exec(\"DROP TABLE IF EXISTS roles\");\n      console.log('‚úÖ Tabla roles eliminada');\n    }\n  },\n  \n  {\n    version: 3,\n    name: 'create_permissions_table',\n    up: async (db: Database) => {\n      db.exec(`\n        CREATE TABLE IF NOT EXISTS permissions (\n          id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n          name TEXT UNIQUE NOT NULL,\n          resource TEXT NOT NULL,\n          action TEXT NOT NULL,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n      \n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_permissions_name ON permissions(name)\");\n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_permissions_resource ON permissions(resource)\");\n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_permissions_action ON permissions(action)\");\n      \n      console.log('‚úÖ Tabla permissions creada');\n    },\n    down: async (db: Database) => {\n      db.exec(\"DROP TABLE IF EXISTS permissions\");\n      console.log('‚úÖ Tabla permissions eliminada');\n    }\n  },\n  \n  {\n    version: 4,\n    name: 'create_user_roles_table',\n    up: async (db: Database) => {\n      db.exec(`\n        CREATE TABLE IF NOT EXISTS user_roles (\n          id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n          user_id TEXT NOT NULL,\n          role_id TEXT NOT NULL,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n          FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,\n          UNIQUE(user_id, role_id)\n        )\n      `);\n      \n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON user_roles(user_id)\");\n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_user_roles_role_id ON user_roles(role_id)\");\n      \n      console.log('‚úÖ Tabla user_roles creada');\n    },\n    down: async (db: Database) => {\n      db.exec(\"DROP TABLE IF EXISTS user_roles\");\n      console.log('‚úÖ Tabla user_roles eliminada');\n    }\n  },\n  \n  {\n    version: 5,\n    name: 'create_role_permissions_table',\n    up: async (db: Database) => {\n      db.exec(`\n        CREATE TABLE IF NOT EXISTS role_permissions (\n          id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n          role_id TEXT NOT NULL,\n          permission_id TEXT NOT NULL,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,\n          FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE,\n          UNIQUE(role_id, permission_id)\n        )\n      `);\n      \n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_role_permissions_role_id ON role_permissions(role_id)\");\n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_role_permissions_permission_id ON role_permissions(permission_id)\");\n      \n      console.log('‚úÖ Tabla role_permissions creada');\n    },\n    down: async (db: Database) => {\n      db.exec(\"DROP TABLE IF EXISTS role_permissions\");\n      console.log('‚úÖ Tabla role_permissions eliminada');\n    }\n  },\n  \n  {\n    version: 6,\n    name: 'create_sessions_table',\n    up: async (db: Database) => {\n      db.exec(`\n        CREATE TABLE IF NOT EXISTS sessions (\n          id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n          user_id TEXT NOT NULL,\n          token TEXT UNIQUE NOT NULL,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          expires_at DATETIME NOT NULL,\n          last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,\n          ip_address TEXT,\n          user_agent TEXT,\n          is_active BOOLEAN DEFAULT 1,\n          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n        )\n      `);\n      \n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON sessions(user_id)\");\n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_sessions_token ON sessions(token)\");\n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_sessions_expires_at ON sessions(expires_at)\");\n      db.exec(\"CREATE INDEX IF NOT EXISTS idx_sessions_active ON sessions(is_active)\");\n      \n      console.log('‚úÖ Tabla sessions creada');\n    },\n    down: async (db: Database) => {\n      db.exec(\"DROP TABLE IF EXISTS sessions\");\n      console.log('‚úÖ Tabla sessions eliminada');\n    }\n  },\n  \n  {\n    version: 7,\n    name: 'create_migration_history_table',\n    up: async (db: Database) => {\n      db.exec(`\n        CREATE TABLE IF NOT EXISTS migration_history (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          version INTEGER UNIQUE NOT NULL,\n          name TEXT NOT NULL,\n          executed_at DATETIME DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n      \n      console.log('‚úÖ Tabla migration_history creada');\n    },\n    down: async (db: Database) => {\n      db.exec(\"DROP TABLE IF EXISTS migration_history\");\n      console.log('‚úÖ Tabla migration_history eliminada');\n    }\n  }\n];\n\n/**\n * Obtiene la versi√≥n actual de la base de datos\n */\nasync function getCurrentVersion(): Promise<number> {\n  try {\n    const db = getDatabase();\n    const result = db.query(\n      \"SELECT MAX(version) as version FROM migration_history\"\n    ).get() as { version: number } | undefined;\n    return result?.version || 0;\n  } catch (error:any) {\n    // Si la tabla no existe, estamos en versi√≥n 0\n    return 0;\n  }\n}\n\n/**\n * Registra una migraci√≥n ejecutada\n */\nasync function recordMigration(version: number, name: string): Promise<void> {\n  const db = getDatabase();\n  db.query(\n    \"INSERT INTO migration_history (version, name) VALUES (?, ?)\"\n  ).run(version, name);\n}\n\n/**\n * Ejecuta todas las migraciones pendientes\n */\nexport async function runMigrations(): Promise<void> {\n  console.log('üîÑ Iniciando migraciones...');\n  \n  const db = getDatabase();\n  \n  // Crear tabla migration_history si no existe\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS migration_history (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      version INTEGER UNIQUE NOT NULL,\n      name TEXT NOT NULL,\n      executed_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n  \n  const currentVersion = await getCurrentVersion();\n  \n  console.log(`üìä Versi√≥n actual de la base de datos: ${currentVersion}`);\n  \n  // Filtrar migraciones pendientes\n  const pendingMigrations = migrations.filter(m => m.version > currentVersion);\n  \n  if (pendingMigrations.length === 0) {\n    console.log('‚úÖ No hay migraciones pendientes');\n    return;\n  }\n  \n  console.log(`üìã ${pendingMigrations.length} migraciones pendientes`);\n  \n  // Ejecutar migraciones en transacci√≥n\n  try {\n    db.exec(\"BEGIN TRANSACTION\");\n    \n    for (const migration of pendingMigrations) {\n      console.log(`‚ö° Ejecutando migraci√≥n ${migration.version}: ${migration.name}`);\n      \n      await migration.up(db);\n      \n      // Solo registrar la migraci√≥n si no es la de migration_history\n      if (migration.name !== 'create_migration_history_table') {\n        await recordMigration(migration.version, migration.name);\n      }\n      \n      console.log(`‚úÖ Migraci√≥n ${migration.version} completada`);\n    }\n    \n    db.exec(\"COMMIT\");\n    console.log('üéâ Todas las migraciones completadas exitosamente');\n    \n  } catch (error:any) {\n    db.exec(\"ROLLBACK\");\n    console.error('‚ùå Error durante las migraciones:', error);\n    throw error;\n  }\n}\n\n/**\n * Revierte migraciones hasta una versi√≥n espec√≠fica\n */\nexport async function rollbackMigrations(targetVersion: number): Promise<void> {\n  console.log(`üîÑ Revirtiendo migraciones hasta la versi√≥n ${targetVersion}...`);\n  \n  const db = getDatabase();\n  const currentVersion = await getCurrentVersion();\n  \n  if (targetVersion >= currentVersion) {\n    console.log('‚úÖ No hay migraciones para revertir');\n    return;\n  }\n  \n  // Filtrar migraciones a revertir (en orden descendente)\n  const migrationsToRollback = migrations\n    .filter(m => m.version > targetVersion && m.version <= currentVersion)\n    .sort((a, b) => b.version - a.version);\n  \n  console.log(`üìã ${migrationsToRollback.length} migraciones a revertir`);\n  \n  try {\n    db.exec(\"BEGIN TRANSACTION\");\n    \n    for (const migration of migrationsToRollback) {\n      console.log(`‚ö° Revirtiendo migraci√≥n ${migration.version}: ${migration.name}`);\n      \n      await migration.down(db);\n      db.query(\"DELETE FROM migration_history WHERE version = ?\").run(migration.version);\n      \n      console.log(`‚úÖ Migraci√≥n ${migration.version} revertida`);\n    }\n    \n    db.exec(\"COMMIT\");\n    console.log('üéâ Rollback completado exitosamente');\n    \n  } catch (error:any) {\n    db.exec(\"ROLLBACK\");\n    console.error('‚ùå Error durante el rollback:', error);\n    throw error;\n  }\n}\n\n/**\n * Obtiene el estado de las migraciones\n */\nexport async function getMigrationStatus(): Promise<{\n  currentVersion: number;\n  availableVersion: number;\n  pendingMigrations: number;\n  executedMigrations: Migration[];\n}> {\n  const currentVersion = await getCurrentVersion();\n  const availableVersion = Math.max(...migrations.map(m => m.version));\n  const pendingMigrations = migrations.filter(m => m.version > currentVersion).length;\n  const executedMigrations = migrations.filter(m => m.version <= currentVersion);\n  \n  return {\n    currentVersion,\n    availableVersion,\n    pendingMigrations,\n    executedMigrations\n  };\n}\n\n/**\n * Resetea completamente la base de datos\n */\nexport async function resetDatabase(): Promise<void> {\n  console.log('üîÑ Reseteando base de datos...');\n  \n  const db = getDatabase();\n  \n  try {\n    db.exec(\"BEGIN TRANSACTION\");\n    \n    // Revertir todas las migraciones\n    const allMigrations = [...migrations].reverse();\n    for (const migration of allMigrations) {\n      try {\n        await migration.down(db);\n      } catch (error:any) {\n        // Ignorar errores si la tabla no existe\n        console.warn(`‚ö†Ô∏è Error al revertir ${migration.name}:`, error);\n      }\n    }\n    \n    // Limpiar historial de migraciones\n    db.exec(\"DROP TABLE IF EXISTS migration_history\");\n    \n    db.exec(\"COMMIT\");\n    console.log('‚úÖ Base de datos reseteada');\n    \n    // Ejecutar migraciones nuevamente\n    await runMigrations();\n    \n  } catch (error:any) {\n    db.exec(\"ROLLBACK\");\n    console.error('‚ùå Error al resetear la base de datos:', error);\n    throw error;\n  }\n}",
    "// src/config/auth.ts\nimport type { AuthConfig, SecurityConfig } from '../types/auth';\n\n/**\n * Configuraci√≥n por defecto para la librer√≠a de autenticaci√≥n\n */\nexport const DEFAULT_AUTH_CONFIG: AuthConfig = {\n  jwtSecret: process.env.JWT_SECRET || 'change-this-secret-in-production',\n  jwtExpiration: process.env.JWT_EXPIRATION || '1h',\n  refreshTokenExpiration: process.env.REFRESH_TOKEN_EXPIRATION || '7d',\n  \n  // Configuraci√≥n de base de datos\n  database: {\n    path: process.env.DATABASE_PATH || './data/auth.db',\n    enableWAL: process.env.DATABASE_WAL === 'true',\n    enableForeignKeys: true,\n    busyTimeout: 5000\n  },\n  \n  // Configuraci√≥n de seguridad\n  security: {\n    bcryptRounds: parseInt(process.env.BCRYPT_ROUNDS || '12'),\n    maxLoginAttempts: parseInt(process.env.MAX_LOGIN_ATTEMPTS || '5'),\n    lockoutDuration: parseInt(process.env.LOCKOUT_DURATION || '900000'), // 15 minutos\n    sessionTimeout: parseInt(process.env.SESSION_TIMEOUT || '3600000'), // 1 hora\n    requireEmailVerification: process.env.REQUIRE_EMAIL_VERIFICATION === 'true',\n    allowMultipleSessions: process.env.ALLOW_MULTIPLE_SESSIONS !== 'false',\n    passwordMinLength: parseInt(process.env.PASSWORD_MIN_LENGTH || '8'),\n    passwordRequireUppercase: process.env.PASSWORD_REQUIRE_UPPERCASE !== 'false',\n    passwordRequireLowercase: process.env.PASSWORD_REQUIRE_LOWERCASE !== 'false',\n    passwordRequireNumbers: process.env.PASSWORD_REQUIRE_NUMBERS !== 'false',\n    passwordRequireSymbols: process.env.PASSWORD_REQUIRE_SYMBOLS !== 'false'\n  },\n  \n  // Configuraci√≥n de CORS\n  cors: {\n    origins: process.env.CORS_ORIGINS?.split(',') || ['http://localhost:3000'],\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    headers: ['Content-Type', 'Authorization']\n  },\n  \n  // Configuraci√≥n de rate limiting\n  rateLimit: {\n    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW || '900000'), // 15 minutos\n    maxRequests: parseInt(process.env.RATE_LIMIT_MAX || '100'),\n    skipSuccessfulRequests: false,\n    skipFailedRequests: false\n  },\n  \n  // Configuraci√≥n de logging\n  logging: {\n    level: (process.env.LOG_LEVEL as 'debug' | 'info' | 'warn' | 'error') || 'info',\n    enableConsole: process.env.LOG_CONSOLE !== 'false',\n    enableFile: process.env.LOG_FILE === 'true',\n    filePath: process.env.LOG_FILE_PATH || './logs/auth.log',\n    enableDatabase: process.env.LOG_DATABASE === 'true'\n  }\n};\n\n/**\n * Configuraci√≥n de seguridad avanzada\n */\nexport const SECURITY_CONFIG: SecurityConfig = {\n  // Configuraci√≥n de headers de seguridad\n  securityHeaders: {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n    'Referrer-Policy': 'strict-origin-when-cross-origin'\n  },\n  \n  // Configuraci√≥n de cookies\n  cookies: {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict' as const,\n    maxAge: 24 * 60 * 60 * 1000 // 24 horas\n  },\n  \n  // Configuraci√≥n de validaci√≥n de entrada\n  validation: {\n    maxEmailLength: 254,\n    maxNameLength: 100,\n    maxPasswordLength: 128,\n    allowedEmailDomains: process.env.ALLOWED_EMAIL_DOMAINS?.split(','),\n    blockedEmailDomains: process.env.BLOCKED_EMAIL_DOMAINS?.split(',') || [\n      'tempmail.org',\n      '10minutemail.com',\n      'guerrillamail.com'\n    ]\n  },\n  \n  // Configuraci√≥n de IP y geolocalizaci√≥n\n  ipSecurity: {\n    enableGeoBlocking: process.env.ENABLE_GEO_BLOCKING === 'true',\n    blockedCountries: process.env.BLOCKED_COUNTRIES?.split(',') || [],\n    enableIPWhitelist: process.env.ENABLE_IP_WHITELIST === 'true',\n    ipWhitelist: process.env.IP_WHITELIST?.split(',') || [],\n    enableIPBlacklist: process.env.ENABLE_IP_BLACKLIST === 'true',\n    ipBlacklist: process.env.IP_BLACKLIST?.split(',') || []\n  }\n};\n\n/**\n * Configuraci√≥n de desarrollo\n */\nexport const DEV_CONFIG: Partial<AuthConfig> = {\n  jwtSecret: 'dev-secret-key-not-for-production',\n  jwtExpiration: '24h',\n  refreshTokenExpiration: '30d',\n  \n  security: {\n    bcryptRounds: 4, // M√°s r√°pido para desarrollo\n    maxLoginAttempts: 10,\n    lockoutDuration: 60000, // 1 minuto\n    sessionTimeout: 24 * 60 * 60 * 1000, // 24 horas\n    requireEmailVerification: false,\n    allowMultipleSessions: true,\n    passwordMinLength: 6,\n    passwordRequireUppercase: false,\n    passwordRequireLowercase: false,\n    passwordRequireNumbers: false,\n    passwordRequireSymbols: false\n  },\n  \n  logging: {\n    level: 'debug',\n    enableConsole: true,\n    enableFile: false,\n    enableDatabase: false\n  }\n};\n\n/**\n * Configuraci√≥n de producci√≥n\n */\nexport const PROD_CONFIG: Partial<AuthConfig> = {\n  security: {\n    bcryptRounds: 14, // M√°s seguro para producci√≥n\n    maxLoginAttempts: 3,\n    lockoutDuration: 30 * 60 * 1000, // 30 minutos\n    sessionTimeout: 60 * 60 * 1000, // 1 hora\n    requireEmailVerification: true,\n    allowMultipleSessions: false,\n    passwordMinLength: 12,\n    passwordRequireUppercase: true,\n    passwordRequireLowercase: true,\n    passwordRequireNumbers: true,\n    passwordRequireSymbols: true\n  },\n  \n  logging: {\n    level: 'warn',\n    enableConsole: false,\n    enableFile: true,\n    enableDatabase: true\n  }\n};\n\n/**\n * Funci√≥n para obtener la configuraci√≥n seg√∫n el entorno\n */\nexport function getAuthConfig(environment?: string): AuthConfig {\n  const env = environment || process.env.NODE_ENV || 'development';\n  \n  let config = { ...DEFAULT_AUTH_CONFIG };\n  \n  switch (env) {\n    case 'development':\n      config = mergeConfig(config, DEV_CONFIG);\n      break;\n    case 'production':\n      config = mergeConfig(config, PROD_CONFIG);\n      break;\n    case 'test':\n      config = mergeConfig(config, {\n        database: { path: ':memory:' },\n        logging: { level: 'error', enableConsole: false }\n      });\n      break;\n  }\n  \n  return config;\n}\n\n/**\n * Funci√≥n para validar la configuraci√≥n\n */\nexport function validateAuthConfig(config: AuthConfig): { valid: boolean; errors: string[] } {\n  const errors: string[] = [];\n  \n  // Validar JWT secret\n  if (!config.jwtSecret || config.jwtSecret === 'change-this-secret-in-production') {\n    if (process.env.NODE_ENV === 'production') {\n      errors.push('JWT secret debe ser configurado en producci√≥n');\n    }\n  }\n  \n  if (config.jwtSecret && config.jwtSecret.length < 32) {\n    errors.push('JWT secret debe tener al menos 32 caracteres');\n  }\n  \n  // Validar configuraci√≥n de base de datos\n  if (!config.database?.path) {\n    errors.push('Ruta de base de datos es requerida');\n  }\n  \n  // Validar configuraci√≥n de seguridad\n  if (config.security) {\n    if (config.security.bcryptRounds < 4 || config.security.bcryptRounds > 20) {\n      errors.push('bcryptRounds debe estar entre 4 y 20');\n    }\n    \n    if (config.security.passwordMinLength < 6) {\n      errors.push('passwordMinLength debe ser al menos 6');\n    }\n    \n    if (config.security.maxLoginAttempts < 1) {\n      errors.push('maxLoginAttempts debe ser al menos 1');\n    }\n  }\n  \n  // Validar CORS\n  if (config.cors?.origins && config.cors.origins.length === 0) {\n    errors.push('Al menos un origen CORS debe ser especificado');\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors\n  };\n}\n\n/**\n * Funci√≥n para obtener variables de entorno requeridas\n */\nexport function getRequiredEnvVars(): { [key: string]: string | undefined } {\n  return {\n    JWT_SECRET: process.env.JWT_SECRET,\n    DATABASE_PATH: process.env.DATABASE_PATH,\n    NODE_ENV: process.env.NODE_ENV,\n    BCRYPT_ROUNDS: process.env.BCRYPT_ROUNDS,\n    MAX_LOGIN_ATTEMPTS: process.env.MAX_LOGIN_ATTEMPTS,\n    CORS_ORIGINS: process.env.CORS_ORIGINS\n  };\n}\n\n/**\n * Funci√≥n para generar un archivo .env de ejemplo\n */\nexport function generateEnvExample(): string {\n  return `# Configuraci√≥n de Autenticaci√≥n\n\n# JWT Configuration\nJWT_SECRET=your-super-secret-jwt-key-change-this-in-production\nJWT_EXPIRATION=1h\nREFRESH_TOKEN_EXPIRATION=7d\n\n# Database Configuration\nDATABASE_PATH=./data/auth.db\nDATABASE_WAL=true\n\n# Security Configuration\nBCRYPT_ROUNDS=12\nMAX_LOGIN_ATTEMPTS=5\nLOCKOUT_DURATION=900000\nSESSION_TIMEOUT=3600000\nREQUIRE_EMAIL_VERIFICATION=false\nALLOW_MULTIPLE_SESSIONS=true\n\n# Password Policy\nPASSWORD_MIN_LENGTH=8\nPASSWORD_REQUIRE_UPPERCASE=true\nPASSWORD_REQUIRE_LOWERCASE=true\nPASSWORD_REQUIRE_NUMBERS=true\nPASSWORD_REQUIRE_SYMBOLS=true\n\n# CORS Configuration\nCORS_ORIGINS=http://localhost:3000,http://localhost:3001\n\n# Rate Limiting\nRATE_LIMIT_WINDOW=900000\nRATE_LIMIT_MAX=100\n\n# Logging\nLOG_LEVEL=info\nLOG_CONSOLE=true\nLOG_FILE=false\nLOG_FILE_PATH=./logs/auth.log\nLOG_DATABASE=false\n\n# Email Validation\nALLOWED_EMAIL_DOMAINS=\nBLOCKED_EMAIL_DOMAINS=tempmail.org,10minutemail.com\n\n# IP Security\nENABLE_GEO_BLOCKING=false\nBLOCKED_COUNTRIES=\nENABLE_IP_WHITELIST=false\nIP_WHITELIST=\nENABLE_IP_BLACKLIST=false\nIP_BLACKLIST=\n\n# Environment\nNODE_ENV=development\n`;\n}\n\n/**\n * Funci√≥n helper para mergear configuraciones\n */\nfunction mergeConfig(base: AuthConfig, override: Partial<AuthConfig>): AuthConfig {\n  const result = { ...base };\n  \n  Object.keys(override).forEach(key => {\n    const value = override[key as keyof AuthConfig];\n    if (value !== undefined) {\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        result[key as keyof AuthConfig] = {\n          ...result[key as keyof AuthConfig],\n          ...value\n        } as any;\n      } else {\n        result[key as keyof AuthConfig] = value as any;\n      }\n    }\n  });\n  \n  return result;\n}\n\n/**\n * Funci√≥n para imprimir la configuraci√≥n actual (sin secretos)\n */\nexport function printConfig(config: AuthConfig): void {\n  const safeConfig = { ...config };\n  \n  // Ocultar informaci√≥n sensible\n  if (safeConfig.jwtSecret) {\n    safeConfig.jwtSecret = '***HIDDEN***';\n  }\n  \n  console.log('üîß Configuraci√≥n de autenticaci√≥n:');\n  console.log(JSON.stringify(safeConfig, null, 2));\n}\n\n/**\n * Exportar configuraci√≥n por defecto\n */\nexport default getAuthConfig();",
    "// src/scripts/seed.ts\nimport { getDatabase, isDatabaseInitialized, initDatabase, forceReinitDatabase } from '../db/connection';\nimport { runMigrations } from '../db/migrations';\nimport { AuthService } from '../services/auth';\nimport { PermissionService } from '../services/permissions';\nimport type { CreatePermissionData, CreateRoleData } from '../types/auth';\n\n/**\n * Datos iniciales para permisos\n */\nconst initialPermissions: CreatePermissionData[] = [\n  // Permisos de usuarios\n  { name: 'users.read', description: 'Ver usuarios' },\n  { name: 'users.create', description: 'Crear usuarios' },\n  { name: 'users.update', description: 'Actualizar usuarios' },\n  { name: 'users.delete', description: 'Eliminar usuarios' },\n  { name: 'users.manage', description: 'Gestionar usuarios completamente' },\n  \n  // Permisos de roles\n  { name: 'roles.read', description: 'Ver roles' },\n  { name: 'roles.create', description: 'Crear roles' },\n  { name: 'roles.update', description: 'Actualizar roles' },\n  { name: 'roles.delete', description: 'Eliminar roles' },\n  { name: 'roles.manage', description: 'Gestionar roles completamente' },\n  \n  // Permisos de permisos\n  { name: 'permissions.read', description: 'Ver permisos' },\n  { name: 'permissions.create', description: 'Crear permisos' },\n  { name: 'permissions.update', description: 'Actualizar permisos' },\n  { name: 'permissions.delete', description: 'Eliminar permisos' },\n  { name: 'permissions.manage', description: 'Gestionar permisos completamente' },\n  \n  // Permisos de contenido\n  { name: 'content.read', description: 'Ver contenido' },\n  { name: 'content.create', description: 'Crear contenido' },\n  { name: 'content.update', description: 'Actualizar contenido' },\n  { name: 'content.delete', description: 'Eliminar contenido' },\n  { name: 'content.publish', description: 'Publicar contenido' },\n  { name: 'content.moderate', description: 'Moderar contenido' },\n  \n  // Permisos de sistema\n  { name: 'system.admin', description: 'Administraci√≥n del sistema' },\n  { name: 'system.settings', description: 'Configuraci√≥n del sistema' },\n  { name: 'system.logs', description: 'Ver logs del sistema' },\n  { name: 'system.backup', description: 'Realizar backups' },\n  { name: 'system.maintenance', description: 'Modo mantenimiento' },\n  \n  // Permisos de reportes\n  { name: 'reports.view', description: 'Ver reportes' },\n  { name: 'reports.create', description: 'Crear reportes' },\n  { name: 'reports.export', description: 'Exportar reportes' },\n  \n  // Permisos de API\n  { name: 'api.read', description: 'Acceso de lectura a API' },\n  { name: 'api.write', description: 'Acceso de escritura a API' },\n  { name: 'api.admin', description: 'Acceso administrativo a API' }\n];\n\n/**\n * Datos iniciales para roles\n */\nconst initialRoles: CreateRoleData[] = [\n  {\n    name: 'admin',\n    description: 'Administrador del sistema con acceso completo',\n    permissions: [\n      'users.manage', 'roles.manage', 'permissions.manage',\n      'content.read', 'content.create', 'content.update', 'content.delete', 'content.publish', 'content.moderate',\n      'system.admin', 'system.settings', 'system.logs', 'system.backup', 'system.maintenance',\n      'reports.view', 'reports.create', 'reports.export',\n      'api.admin'\n    ]\n  },\n  {\n    name: 'moderator',\n    description: 'Moderador con permisos de gesti√≥n de contenido',\n    permissions: [\n      'users.read', 'users.update',\n      'content.read', 'content.create', 'content.update', 'content.delete', 'content.moderate',\n      'reports.view',\n      'api.read', 'api.write'\n    ]\n  },\n  {\n    name: 'editor',\n    description: 'Editor con permisos de creaci√≥n y edici√≥n de contenido',\n    permissions: [\n      'content.read', 'content.create', 'content.update', 'content.publish',\n      'api.read', 'api.write'\n    ]\n  },\n  {\n    name: 'author',\n    description: 'Autor con permisos b√°sicos de creaci√≥n de contenido',\n    permissions: [\n      'content.read', 'content.create', 'content.update',\n      'api.read'\n    ]\n  },\n  {\n    name: 'user',\n    description: 'Usuario b√°sico con permisos de lectura',\n    permissions: [\n      'content.read',\n      'api.read'\n    ]\n  },\n  {\n    name: 'guest',\n    description: 'Invitado con acceso muy limitado',\n    permissions: [\n      'content.read'\n    ]\n  }\n];\n\n/**\n * Usuarios iniciales del sistema\n */\nconst initialUsers = [\n  {\n    email: 'admin@example.com',\n    password: 'Admin123!@#',\n    firstName: 'System',\n    lastName: 'Administrator',\n    roles: ['admin']\n  },\n  {\n    email: 'moderator@example.com',\n    password: 'Moderator123!',\n    firstName: 'Content',\n    lastName: 'Moderator',\n    roles: ['moderator']\n  },\n  {\n    email: 'editor@example.com',\n    password: 'Editor123!',\n    firstName: 'Content',\n    lastName: 'Editor',\n    roles: ['editor']\n  },\n  {\n    email: 'author@example.com',\n    password: 'Author123!',\n    firstName: 'Content',\n    lastName: 'Author',\n    roles: ['author']\n  },\n  {\n    email: 'user@example.com',\n    password: 'User123!',\n    firstName: 'Regular',\n    lastName: 'User',\n    roles: ['user']\n  }\n];\n\n/**\n * Funci√≥n principal de seeding\n */\nexport async function seedDatabase(): Promise<void> {\n  try {\n    console.log('üå± Iniciando seeding de la base de datos...');\n    \n    // Inicializar base de datos y ejecutar migraciones\n    initDatabase();\n    await runMigrations();\n    \n    const permissionService = new PermissionService();\n    const authService = new AuthService();\n    \n    console.log('üìù Creando permisos iniciales...');\n    \n    // Crear permisos\n    const createdPermissions = new Map<string, string>();\n    for (const permission of initialPermissions) {\n      try {\n        const result = await permissionService.createPermission(permission);\n        if (result.success && result.data) {\n          createdPermissions.set(permission.name, result.data.id);\n          console.log(`  ‚úÖ Permiso creado: ${permission.name}`);\n        }\n      } catch (error:any) {\n        console.log(`  ‚ö†Ô∏è  Permiso ya existe: ${permission.name}`);\n      }\n    }\n    \n    console.log('üë• Creando roles iniciales...');\n    \n    // Crear roles\n    const createdRoles = new Map<string, string>();\n    for (const role of initialRoles) {\n      try {\n        const result = await permissionService.createRole({\n          name: role.name,\n          description: role.description\n        });\n        \n        if (result.success && result.data) {\n          createdRoles.set(role.name, result.data.id);\n          console.log(`  ‚úÖ Rol creado: ${role.name}`);\n          \n          // Asignar permisos al rol\n          for (const permissionName of role.permissions) {\n            const permissionId = createdPermissions.get(permissionName);\n            if (permissionId) {\n              await permissionService.assignPermissionToRole(result.data.id, permissionId);\n            }\n          }\n          console.log(`    üìã Permisos asignados al rol ${role.name}`);\n        }\n      } catch (error:any) {\n        console.log(`  ‚ö†Ô∏è  Rol ya existe: ${role.name}`);\n      }\n    }\n    \n    console.log('üë§ Creando usuarios iniciales...');\n    \n    // Crear usuarios\n    for (const user of initialUsers) {\n      try {\n        const result = await authService.register({\n          email: user.email,\n          password: user.password,\n          firstName: user.firstName,\n          lastName: user.lastName\n        });\n        \n        if (result.success && result.data) {\n          console.log(`  ‚úÖ Usuario creado: ${user.email}`);\n          \n          // Asignar roles al usuario\n          for (const roleName of user.roles) {\n            const roleId = createdRoles.get(roleName);\n            if (roleId) {\n              await permissionService.assignRoleToUser(result.data.user.id, roleId);\n            }\n          }\n          console.log(`    üé≠ Roles asignados al usuario ${user.email}`);\n        }\n      } catch (error:any) {\n        console.log(`  ‚ö†Ô∏è  Usuario ya existe: ${user.email}`);\n      }\n    }\n    \n    console.log('‚ú® Seeding completado exitosamente!');\n    console.log('\\nüìä Resumen:');\n    console.log(`  - Permisos: ${initialPermissions.length}`);\n    console.log(`  - Roles: ${initialRoles.length}`);\n    console.log(`  - Usuarios: ${initialUsers.length}`);\n    console.log('\\nüîê Credenciales de acceso:');\n    console.log('  Admin: admin@example.com / Admin123!@#');\n    console.log('  Moderator: moderator@example.com / Moderator123!');\n    console.log('  Editor: editor@example.com / Editor123!');\n    console.log('  Author: author@example.com / Author123!');\n    console.log('  User: user@example.com / User123!');\n    \n  } catch (error:any) {\n    console.error('‚ùå Error durante el seeding:', error);\n    throw error;\n  }\n}\n\n/**\n * Funci√≥n para limpiar la base de datos\n */\nexport async function cleanDatabase(): Promise<void> {\n  try {\n    console.log('üßπ Limpiando base de datos...');\n    \n    // Verificar si la base de datos est√° inicializada\n    if (!isDatabaseInitialized()) {\n      console.log('‚ö†Ô∏è Base de datos no inicializada, inicializando...');\n      initDatabase('./test.db');\n    }\n    \n    let db = getDatabase();\n\n    // Deshabilitar foreign keys temporalmente\n    try {\n        db.exec('PRAGMA foreign_keys = OFF');\n    } catch (error:any) {\n        if (error instanceof Error && (error.message.includes('Database has closed') || error.message.includes('Cannot use a closed database'))) {\n            console.log('üîÑ Database was closed during operation, force reinitializing...');\n            db = forceReinitDatabase();\n            db.exec('PRAGMA foreign_keys = OFF');\n        } else {\n            throw error;\n        }\n    }\n    \n    // Limpiar tablas en orden correcto (respetando foreign keys)\n    const tables = [\n      'user_roles',\n      'role_permissions', \n      'sessions',\n      'users',\n      'roles',\n      'permissions'\n    ];\n    \n    for (const table of tables) {\n      try {\n        db.exec(`DELETE FROM ${table}`);\n        console.log(`  ‚úÖ Tabla ${table} limpiada`);\n      } catch (error:any) {\n        console.log(`  ‚ö†Ô∏è  Error limpiando tabla ${table}:`, error);\n      }\n    }\n    \n    // Rehabilitar foreign keys\n    db.exec('PRAGMA foreign_keys = ON');\n    \n    console.log('‚ú® Base de datos limpiada exitosamente!');\n    \n  } catch (error:any) {\n    console.error('‚ùå Error durante la limpieza:', error);\n    throw error;\n  }\n}\n\n/**\n * Funci√≥n para resetear completamente la base de datos\n */\nexport async function resetDatabase(): Promise<void> {\n  try {\n    console.log('üîÑ Reseteando base de datos...');\n    \n    await cleanDatabase();\n    await seedDatabase();\n    \n    console.log('‚ú® Base de datos reseteada exitosamente!');\n    \n  } catch (error:any) {\n    console.error('‚ùå Error durante el reseteo:', error);\n    throw error;\n  }\n}\n\n/**\n * Funci√≥n para verificar el estado de la base de datos\n */\nexport async function checkDatabaseStatus(): Promise<void> {\n  try {\n    console.log('üîç Verificando estado de la base de datos...');\n    \n    const db = getDatabase();\n    \n    // Contar registros en cada tabla\n    const tables = ['users', 'roles', 'permissions', 'user_roles', 'role_permissions', 'sessions'];\n    \n    console.log('\\nüìä Estado actual:');\n    for (const table of tables) {\n      try {\n        const result = db.query(`SELECT COUNT(*) as count FROM ${table}`).get() as { count: number };\n        console.log(`  ${table}: ${result.count} registros`);\n      } catch (error:any) {\n        console.log(`  ${table}: Tabla no existe`);\n      }\n    }\n    \n    // Verificar usuarios con roles\n    try {\n      const usersWithRoles = db.query(`\n        SELECT u.email, GROUP_CONCAT(r.name) as roles\n        FROM users u\n        LEFT JOIN user_roles ur ON u.id = ur.user_id\n        LEFT JOIN roles r ON ur.role_id = r.id\n        GROUP BY u.id, u.email\n        ORDER BY u.email\n      `).all();\n      \n      if (usersWithRoles.length > 0) {\n        console.log('\\nüë• Usuarios y sus roles:');\n        usersWithRoles.forEach((user: any) => {\n          console.log(`  ${user.email}: ${user.roles || 'Sin roles'}`);\n        });\n      }\n    } catch (error:any) {\n      console.log('  ‚ö†Ô∏è  No se pudieron obtener usuarios con roles');\n    }\n    \n  } catch (error:any) {\n    console.error('‚ùå Error verificando estado:', error);\n    throw error;\n  }\n}\n\n// Ejecutar seeding si el script se ejecuta directamente\nif (import.meta.main) {\n  const command = process.argv[2];\n  \n  switch (command) {\n    case 'seed':\n      await seedDatabase();\n      break;\n    case 'clean':\n      await cleanDatabase();\n      break;\n    case 'reset':\n      await resetDatabase();\n      break;\n    case 'status':\n      await checkDatabaseStatus();\n      break;\n    default:\n      console.log('Uso: bun run src/scripts/seed.ts [seed|clean|reset|status]');\n      console.log('  seed   - Poblar base de datos con datos iniciales');\n      console.log('  clean  - Limpiar todos los datos');\n      console.log('  reset  - Limpiar y volver a poblar');\n      console.log('  status - Verificar estado actual');\n  }\n  \n  process.exit(0);\n}",
    "// src/scripts/dev.ts\nimport { seedDatabase, cleanDatabase, resetDatabase, checkDatabaseStatus } from './seed';\nimport { runMigrations, rollbackMigrations, getMigrationStatus,type Migration } from '../db/migrations';\nimport { getDatabase, initDatabase, closeDatabase } from '../db/connection';\nimport { AuthService } from '../services/auth';\nimport { PermissionService } from '../services/permissions';\nimport { JWTService } from '../services/jwt';\n\n/**\n * Configuraci√≥n de desarrollo\n */\nconst DEV_CONFIG = {\n  jwtSecret: 'dev-secret-key-change-in-production',\n  jwtExpiration: '1h',\n  refreshTokenExpiration: '7d'\n};\n\n/**\n * Comandos disponibles para desarrollo\n */\nconst COMMANDS = {\n  // Base de datos\n  'db:init': 'Inicializar base de datos',\n  'db:migrate': 'Ejecutar migraciones',\n  'db:rollback': 'Revertir migraciones',\n  'db:status': 'Estado de migraciones',\n  'db:seed': 'Poblar con datos iniciales',\n  'db:clean': 'Limpiar datos',\n  'db:reset': 'Resetear completamente',\n  'db:check': 'Verificar estado',\n  \n  // Usuarios\n  'user:create': 'Crear usuario',\n  'user:list': 'Listar usuarios',\n  'user:roles': 'Asignar roles a usuario',\n  'user:delete': 'Eliminar usuario',\n  \n  // Roles y permisos\n  'role:create': 'Crear rol',\n  'role:list': 'Listar roles',\n  'role:get': 'Obtener rol por nombre',\n  'permission:create': 'Crear permiso',\n  'permission:list': 'Listar permisos',\n  \n  // JWT\n  'jwt:generate': 'Generar token JWT',\n  'jwt:verify': 'Verificar token JWT',\n  \n  // Utilidades\n  'help': 'Mostrar ayuda',\n  'test:auth': 'Probar autenticaci√≥n',\n  'test:permissions': 'Probar permisos'\n};\n\n/**\n * Funci√≥n principal del CLI de desarrollo\n */\nexport async function runDevCommand(command: string, ...args: string[]): Promise<void> {\n  try {\n    console.log(`üöÄ Ejecutando comando: ${command}`);\n    \n    switch (command) {\n      // Comandos de base de datos\n      case 'db:init':\n        initDatabase();\n        console.log('‚úÖ Base de datos inicializada');\n        break;\n        \n      case 'db:migrate':\n        await runMigrations();\n        console.log('‚úÖ Migraciones ejecutadas');\n        break;\n        \n      case 'db:rollback':\n        const version = args[0] ? parseInt(args[0]) : 0;\n        await rollbackMigrations(version);\n        console.log('‚úÖ Migraciones revertidas');\n        break;\n        \n      case 'db:status':\n        const data = await getMigrationStatus();\n        console.log('üìä Estado de migraciones:');\n        data.executedMigrations.forEach(migration => {\n          const status = migration ? '‚úÖ' : '‚è≥';\n          console.log(`  ${status} ${migration.version}: ${migration.name}`);\n        });\n        break;\n        \n      case 'db:seed':\n        await seedDatabase();\n        break;\n        \n      case 'db:clean':\n        await cleanDatabase();\n        break;\n        \n      case 'db:reset':\n        await resetDatabase();\n        break;\n        \n      case 'db:check':\n        await checkDatabaseStatus();\n        break;\n        \n      // Comandos de usuarios\n      case 'user:create':\n        await createUser(args);\n        break;\n        \n      case 'user:list':\n        await listUsers();\n        break;\n        \n      case 'user:roles':\n        await assignUserRoles(args);\n        break;\n        \n      case 'user:delete':\n        await deleteUser(args[0]);\n        break;\n        \n      // Comandos de roles\n      case 'role:create':\n        await createRole(args);\n        break;\n        \n      case 'role:list':\n        await listRoles();\n        break;\n        \n      case 'role:get':\n        await getRoleByName(args);\n        break;\n        \n      // Comandos de permisos\n      case 'permission:create':\n        await createPermission(args);\n        break;\n        \n      case 'permission:list':\n        await listPermissions();\n        break;\n        \n      // Comandos JWT\n      case 'jwt:generate':\n        await generateJWT(args);\n        break;\n        \n      case 'jwt:verify':\n        await verifyJWT(args[0]);\n        break;\n        \n      // Comandos de prueba\n      case 'test:auth':\n        await testAuthentication();\n        break;\n        \n      case 'test:permissions':\n        await testPermissions();\n        break;\n        \n      case 'help':\n      default:\n        showHelp();\n        break;\n    }\n    \n  } catch (error:any) {\n    console.error(`‚ùå Error ejecutando comando ${command}:`, error);\n    process.exit(1);\n  }\n}\n\n/**\n * Crear un nuevo usuario\n */\nasync function createUser(args: string[]): Promise<void> {\n  if (args.length < 4) {\n    console.log('Uso: user:create <email> <password> <firstName> <lastName> [roles...]');\n    return;\n  }\n  \n  const [email, password, firstName, lastName, ...roles] = args;\n  \n  const authService = new AuthService();\n  const permissionService = new PermissionService();\n  \n  const result = await authService.register({\n    email,\n    password,\n    firstName,\n    lastName\n  });\n  \n  if (!result) {\n    console.error('‚ùå Error creando usuario:', result);\n    return;\n  }\n  \n  console.log(`‚úÖ Usuario creado: ${email} (ID: ${result.user.id})`);\n  \n  // Asignar roles si se especificaron\n  if (roles.length > 0) {\n    for (const roleName of roles) {\n      try {\n        const roleResult = await permissionService.getRoleByName(roleName);\n        if (roleResult.success && roleResult) {\n          await permissionService.assignRoleToUser(result.user.id, roleResult.id);\n          console.log(`  üé≠ Rol asignado: ${roleName}`);\n        }\n      } catch (error:any) {\n        console.log(`  ‚ö†Ô∏è  No se pudo asignar rol: ${roleName}`);\n      }\n    }\n  }\n}\n\n/**\n * Listar todos los usuarios\n */\nasync function listUsers(): Promise<void> {\n  const db = getDatabase();\n  \n  const users = db.query(`\n    SELECT \n      u.id,\n      u.email,\n      u.first_name,\n      u.last_name,\n      u.is_active,\n      u.created_at,\n      GROUP_CONCAT(r.name) as roles\n    FROM users u\n    LEFT JOIN user_roles ur ON u.id = ur.user_id\n    LEFT JOIN roles r ON ur.role_id = r.id\n    GROUP BY u.id\n    ORDER BY u.created_at DESC\n  `).all();\n  \n  if (users.length === 0) {\n    console.log('üì≠ No hay usuarios registrados');\n    return;\n  }\n  \n  console.log('üë• Usuarios registrados:');\n  users.forEach((user: any) => {\n    const status = user.is_active ? 'üü¢' : 'üî¥';\n    console.log(`  ${status} ${user.email} (${user.first_name} ${user.last_name})`);\n    console.log(`    ID: ${user.id}`);\n    console.log(`    Roles: ${user.roles || 'Sin roles'}`);\n    console.log(`    Creado: ${new Date(user.created_at).toLocaleString()}`);\n    console.log('');\n  });\n}\n\n/**\n * Asignar roles a un usuario\n */\nasync function assignUserRoles(args: string[]): Promise<void> {\n  if (args.length < 2) {\n    console.log('Uso: user:roles <email> <role1> [role2] [role3]...');\n    return;\n  }\n  \n  const [email, ...roles] = args;\n  \n  const authService = new AuthService();\n  const permissionService = new PermissionService();\n  \n  const user = await authService.findUserByEmail(email);\n  if (!user) {\n    console.error(`‚ùå Usuario no encontrado: ${email}`);\n    return;\n  }\n  \n  console.log(`üë§ Asignando roles al usuario: ${email}`);\n  \n  for (const roleName of roles) {\n    try {\n      const roleResult = await permissionService.getRoleByName(roleName);\n      if (roleResult.success && roleResult) {\n        await permissionService.assignRoleToUser(user.id, roleResult.id);\n        console.log(`  ‚úÖ Rol asignado: ${roleName}`);\n      } else {\n        console.log(`  ‚ùå Rol no encontrado: ${roleName}`);\n      }\n    } catch (error:any) {\n      console.log(`  ‚ö†Ô∏è  Error asignando rol ${roleName}:`, error);\n    }\n  }\n}\n\n/**\n * Eliminar un usuario\n */\nasync function deleteUser(email: string): Promise<void> {\n  if (!email) {\n    console.log('Uso: user:delete <email>');\n    return;\n  }\n  \n  const authService = new AuthService();\n  const user = await authService.findUserByEmail(email);\n  \n  if (!user) {\n    console.error(`‚ùå Usuario no encontrado: ${email}`);\n    return;\n  }\n  \n  const db = getDatabase();\n  \n  // Eliminar relaciones primero\n  db.run('DELETE FROM user_roles WHERE user_id = ?', [user.id]);\n  db.run('DELETE FROM sessions WHERE user_id = ?', [user.id]);\n  \n  // Eliminar usuario\n  db.run('DELETE FROM users WHERE id = ?', [user.id]);\n  \n  console.log(`‚úÖ Usuario eliminado: ${email}`);\n}\n\n/**\n * Crear un nuevo rol\n */\nasync function createRole(args: string[]): Promise<void> {\n  if (args.length < 2) {\n    console.log('Uso: role:create <name> <description> [permission1] [permission2]...');\n    return;\n  }\n  \n  const [name, description, ...permissions] = args;\n  \n  const permissionService = new PermissionService();\n  \n  const result = await permissionService.createRole({ name, description });\n  \n  if (!result.success || !result) {\n    console.error('‚ùå Error creando rol:', result.error);\n    return;\n  }\n  \n  console.log(`‚úÖ Rol creado: ${name} (ID: ${result.id})`);\n  \n  // Asignar permisos si se especificaron\n  if (permissions.length > 0) {\n    for (const permissionName of permissions) {\n      try {\n        const permResult = await permissionService.getPermissionByName(permissionName);\n        if (permResult.success && permResult) {\n          await permissionService.assignPermissionToRole(result.id, permResult.id);\n          console.log(`  üìã Permiso asignado: ${permissionName}`);\n        }\n      } catch (error:any) {\n        console.log(`  ‚ö†Ô∏è  No se pudo asignar permiso: ${permissionName}`);\n      }\n    }\n  }\n}\n\n/**\n * Obtener un rol por nombre\n */\nasync function getRoleByName(args: string[]): Promise<void> {\n  if (args.length < 1) {\n    console.log('Uso: role:get <name>');\n    return;\n  }\n  \n  const [name] = args;\n  \n  const permissionService = new PermissionService();\n  \n  try {\n    const role = await permissionService.findRoleByName(name, true);\n    \n    if (!role) {\n      console.error(`‚ùå Rol no encontrado: ${name}`);\n      return;\n    }\n    \n    console.log('üé≠ Informaci√≥n del rol:');\n    console.log(`  üìã Nombre: ${role.name}`);\n    console.log(`  üÜî ID: ${role.id}`);\n    console.log(`  üìÖ Creado: ${new Date(role.created_at).toLocaleString()}`);\n    \n    if (role.permissions && role.permissions.length > 0) {\n      console.log('  üîê Permisos:');\n      role.permissions.forEach(permission => {\n        console.log(`    - ${permission.name} (${permission.resource}:${permission.action})`);\n      });\n    } else {\n      console.log('  üîê Permisos: Sin permisos asignados');\n    }\n    \n  } catch (error:any) {\n    console.error(`‚ùå Error obteniendo rol: ${error}`);\n  }\n}\n\n/**\n * Listar todos los roles\n */\nasync function listRoles(): Promise<void> {\n  const db = getDatabase();\n  \n  const roles = db.query(`\n    SELECT \n      r.id,\n      r.name,\n      r.description,\n      r.created_at,\n      GROUP_CONCAT(p.name) as permissions\n    FROM roles r\n    LEFT JOIN role_permissions rp ON r.id = rp.role_id\n    LEFT JOIN permissions p ON rp.permission_id = p.id\n    GROUP BY r.id\n    ORDER BY r.name\n  `).all();\n  \n  if (roles.length === 0) {\n    console.log('üì≠ No hay roles registrados');\n    return;\n  }\n  \n  console.log('üé≠ Roles registrados:');\n  roles.forEach((role: any) => {\n    console.log(`  üìã ${role.name}`);\n    console.log(`    Descripci√≥n: ${role.description}`);\n    console.log(`    Permisos: ${role.permissions || 'Sin permisos'}`);\n    console.log(`    Creado: ${new Date(role.created_at).toLocaleString()}`);\n    console.log('');\n  });\n}\n\n/**\n * Crear un nuevo permiso\n */\nasync function createPermission(args: string[]): Promise<void> {\n  if (args.length < 2) {\n    console.log('Uso: permission:create <name> <description>');\n    return;\n  }\n  \n  const [name, description] = args;\n  \n  const permissionService = new PermissionService();\n  \n  const result = await permissionService.createPermission({ name, description });\n  \n  if (!result.success || !result) {\n    console.error('‚ùå Error creando permiso:', result.error);\n    return;\n  }\n  \n  console.log(`‚úÖ Permiso creado: ${name} (ID: ${result.id})`);\n}\n\n/**\n * Listar todos los permisos\n */\nasync function listPermissions(): Promise<void> {\n  const db = getDatabase();\n  \n  const permissions = db.query(`\n    SELECT id, name, description, created_at\n    FROM permissions\n    ORDER BY name\n  `).all();\n  \n  if (permissions.length === 0) {\n    console.log('üì≠ No hay permisos registrados');\n    return;\n  }\n  \n  console.log('üîê Permisos registrados:');\n  permissions.forEach((permission: any) => {\n    console.log(`  üìù ${permission.name}`);\n    console.log(`    Descripci√≥n: ${permission.description}`);\n    console.log(`    Creado: ${new Date(permission.created_at).toLocaleString()}`);\n    console.log('');\n  });\n}\n\n/**\n * Generar un token JWT\n */\nasync function generateJWT(args: string[]): Promise<void> {\n  if (args.length < 1) {\n    console.log('Uso: jwt:generate <email>');\n    return;\n  }\n  \n  const email = args[0];\n  \n  const authService = new AuthService();\n  const user = await authService.findUserByEmail(email);\n  \n  if (!user) {\n    console.error(`‚ùå Usuario no encontrado: ${email}`);\n    return;\n  }\n  \n  const jwtService = new JWTService(DEV_CONFIG.jwtSecret);\n  \n  const payload = {\n    userId: user.id,\n    email: user.email,\n    roles: user.roles.map(r => r.name)\n  };\n  \n  const token = jwtService.generateToken(payload, DEV_CONFIG.jwtExpiration);\n  const refreshToken = jwtService.generateRefreshToken(user.id, DEV_CONFIG.refreshTokenExpiration);\n  \n  console.log('üé´ Tokens generados:');\n  console.log(`Access Token: ${token}`);\n  console.log(`Refresh Token: ${refreshToken}`);\n  console.log(`\\nPayload: ${JSON.stringify(payload, null, 2)}`);\n}\n\n/**\n * Verificar un token JWT\n */\nasync function verifyJWT(token: string): Promise<void> {\n  if (!token) {\n    console.log('Uso: jwt:verify <token>');\n    return;\n  }\n  \n  const jwtService = new JWTService(DEV_CONFIG.jwtSecret);\n  \n  try {\n    const payload = jwtService.verifyToken(token);\n    console.log('‚úÖ Token v√°lido');\n    console.log(`Payload: ${JSON.stringify(payload, null, 2)}`);\n  } catch (error:any) {\n    console.error('‚ùå Token inv√°lido:', error);\n  }\n}\n\n/**\n * Probar el sistema de autenticaci√≥n\n */\nasync function testAuthentication(): Promise<void> {\n  console.log('üß™ Probando sistema de autenticaci√≥n...');\n  \n  const authService = new AuthService();\n  \n  // Probar registro\n  console.log('\\n1. Probando registro...');\n  const registerResult = await authService.register({\n    email: 'test@example.com',\n    password: 'Test123!',\n    firstName: 'Test',\n    lastName: 'User'\n  });\n  \n  if (registerResult.success) {\n    console.log('‚úÖ Registro exitoso');\n  } else {\n    console.log('‚ö†Ô∏è  Usuario ya existe o error en registro');\n  }\n  \n  // Probar login\n  console.log('\\n2. Probando login...');\n  const loginResult = await authService.login({\n    email: 'test@example.com',\n    password: 'Test123!'\n  });\n  \n  if (loginResult.success && loginResult) {\n    console.log('‚úÖ Login exitoso');\n    console.log(`Token: ${loginResult.accessToken.substring(0, 50)}...`);\n  } else {\n    console.log('‚ùå Error en login:', loginResult.error);\n  }\n  \n  // Probar login con credenciales incorrectas\n  console.log('\\n3. Probando login con credenciales incorrectas...');\n  const badLoginResult = await authService.login({\n    email: 'test@example.com',\n    password: 'WrongPassword'\n  });\n  \n  if (!badLoginResult.success) {\n    console.log('‚úÖ Login rechazado correctamente');\n  } else {\n    console.log('‚ùå Error: login deber√≠a haber fallado');\n  }\n}\n\n/**\n * Probar el sistema de permisos\n */\nasync function testPermissions(): Promise<void> {\n  console.log('üß™ Probando sistema de permisos...');\n  \n  const permissionService = new PermissionService();\n  \n  // Crear permiso de prueba\n  console.log('\\n1. Creando permiso de prueba...');\n  const permResult = await permissionService.createPermission({\n    name: 'test.permission',\n    description: 'Permiso de prueba'\n  });\n  \n  if (permResult.success) {\n    console.log('‚úÖ Permiso creado');\n  } else {\n    console.log('‚ö†Ô∏è  Permiso ya existe');\n  }\n  \n  // Crear rol de prueba\n  console.log('\\n2. Creando rol de prueba...');\n  const roleResult = await permissionService.createRole({\n    name: 'test.role',\n    description: 'Rol de prueba'\n  });\n  \n  if (roleResult.success) {\n    console.log('‚úÖ Rol creado');\n  } else {\n    console.log('‚ö†Ô∏è  Rol ya existe');\n  }\n  \n  console.log('\\n‚úÖ Pruebas de permisos completadas');\n}\n\n/**\n * Mostrar ayuda\n */\nfunction showHelp(): void {\n  console.log('üõ†Ô∏è  CLI de Desarrollo - Auth Library');\n  console.log('\\nComandos disponibles:');\n  \n  Object.entries(COMMANDS).forEach(([command, description]) => {\n    console.log(`  ${command.padEnd(20)} - ${description}`);\n  });\n  \n  console.log('\\nEjemplos:');\n  console.log('  bun run src/scripts/dev.ts db:reset');\n  console.log('  bun run src/scripts/dev.ts user:create admin@test.com Admin123! Admin User admin');\n  console.log('  bun run src/scripts/dev.ts jwt:generate admin@test.com');\n}\n\n// Ejecutar comando si el script se ejecuta directamente\nif (import.meta.main) {\n  const command = process.argv[2] || 'help';\n  const args = process.argv.slice(3);\n  \n  await runDevCommand(command, ...args);\n  \n  // Cerrar conexi√≥n a la base de datos\n  closeDatabase();\n  \n  process.exit(0);\n}",
    "// src/index.ts\n// Punto de entrada principal de la librer√≠a de autenticaci√≥n\n\n// Servicios principales\nexport { AuthService } from './services/auth';\nexport { JWTService } from './services/jwt';\nexport { PermissionService } from './services/permissions';\n\n// Middleware agn√≥stico\nexport {\n  authenticateRequest,\n  authorizeRequest,\n  getCurrentUser,\n  createEmptyAuthContext,\n  logAuthEvent,\n  extractClientIP,\n  extractUserAgent,\n  type AuthMiddlewareConfig\n} from './middleware/auth';\n\n// Adaptadores para frameworks\nexport {\n  honoAuthMiddleware,\n  honoOptionalAuth,\n  honoRequireAuth,\n  honoRequirePermissions,\n  honoRequireRoles,\n  honoRequireAdmin,\n  honoRequireModerator,\n  getHonoCurrentUser,\n  isHonoAuthenticated,\n  getHonoAuthContext,\n  honoRequireOwnership,\n  honoRateLimit,\n  honoCorsAuth,\n  honoErrorResponse,\n  honoSuccessResponse,\n  honoAuthLogger\n} from './adapters/hono';\n\nexport {\n  expressAuthMiddleware,\n  expressOptionalAuth,\n  expressRequireAuth,\n  expressRequirePermissions,\n  expressRequireRoles,\n  expressRequireAdmin,\n  expressRequireModerator,\n  getExpressCurrentUser,\n  isExpressAuthenticated,\n  getExpressAuthContext,\n  expressRequireOwnership,\n  expressRateLimit,\n  expressCorsAuth,\n  expressErrorResponse,\n  expressSuccessResponse,\n  expressAuthLogger,\n  expressAuthErrorHandler,\n  expressJsonValidator,\n  expressSanitizer\n} from './adapters/express';\n\nexport {\n  authenticateWebSocket,\n  checkWebSocketPermissions,\n  checkWebSocketRoles,\n  getWebSocketCurrentUser,\n  isWebSocketAuthenticated,\n  getWebSocketAuthContext,\n  sendToUser,\n  sendToUsersWithPermissions,\n  sendToUsersWithRoles,\n  broadcastToAuthenticated,\n  getConnectionStats,\n  disconnectUser,\n  cleanupInactiveConnections,\n  handleAuthenticatedMessage,\n  createWebSocketResponse,\n  initializeConnectionCleanup,\n  type AuthenticatedWebSocket,\n  type WebSocketAuthConfig\n} from './adapters/websocket';\n\n// Base de datos\nexport {\n  getDatabase,\n  initDatabase,\n  closeDatabase,\n  testConnection,\n  getDatabaseInfo\n} from './db/connection';\n\nexport {\n  runMigrations,\n  rollbackMigrations,\n  getMigrationStatus,\n  resetDatabase as resetDatabaseMigrations\n} from './db/migrations';\n\n// Configuraci√≥n\nexport {\n  DEFAULT_AUTH_CONFIG,\n  SECURITY_CONFIG,\n  DEV_CONFIG,\n  PROD_CONFIG,\n  getAuthConfig,\n  validateAuthConfig,\n  getRequiredEnvVars,\n  generateEnvExample,\n  printConfig\n} from './config/auth';\n\n// Scripts de utilidad\nexport {\n  seedDatabase,\n  cleanDatabase,\n  resetDatabase,\n  checkDatabaseStatus\n} from './scripts/seed';\n\nexport {\n  runDevCommand\n} from './scripts/dev';\n\n// Tipos TypeScript\nexport type {\n  User,\n  Role,\n  Permission,\n  AuthContext,\n  AuthConfig,\n  AuthRequest,\n  AuthResponse,\n  RegisterData,\n  LoginData,\n  AuthResult,\n  JWTPayload,\n  PermissionOptions,\n  CreatePermissionData,\n  CreateRoleData,\n  AssignRoleData,\n  AdapterConfig,\n  DatabaseResult,\n  UserQueryOptions,\n  AuthStats,\n  AuthEvent,\n  AuthEventData,\n  SecurityConfig,\n  SessionInfo,\n  AuthErrorType,\n  AuthError\n} from './types/auth';\n\n// Clase principal de la librer√≠a\nexport class AuthLibrary {\n  private authService: AuthService;\n  private jwtService: JWTService;\n  private permissionService: PermissionService;\n  private config: AuthConfig;\n\n  constructor(config?: Partial<AuthConfig>) {\n    this.config = getAuthConfig();\n    \n    // Mergear configuraci√≥n personalizada\n    if (config) {\n      this.config = { ...this.config, ...config };\n    }\n\n    // Validar configuraci√≥n\n    const validation = validateAuthConfig(this.config);\n    if (!validation.valid) {\n      throw new Error(`Configuraci√≥n inv√°lida: ${validation.errors.join(', ')}`);\n    }\n\n    // Inicializar servicios\n    this.jwtService = new JWTService(this.config.jwtSecret);\n    this.authService = new AuthService();\n    this.permissionService = new PermissionService();\n  }\n\n  /**\n   * Inicializar la librer√≠a\n   */\n  async initialize(): Promise<void> {\n    try {\n      initDatabase();\n      await runMigrations();\n      console.log('‚úÖ Auth Library inicializada correctamente');\n    } catch (error:any) {\n      console.error('‚ùå Error inicializando Auth Library:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtener el servicio de autenticaci√≥n\n   */\n  getAuthService(): AuthService {\n    return this.authService;\n  }\n\n  /**\n   * Obtener el servicio JWT\n   */\n  getJWTService(): JWTService {\n    return this.jwtService;\n  }\n\n  /**\n   * Obtener el servicio de permisos\n   */\n  getPermissionService(): PermissionService {\n    return this.permissionService;\n  }\n\n  /**\n   * Obtener la configuraci√≥n actual\n   */\n  getConfig(): AuthConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Actualizar configuraci√≥n\n   */\n  updateConfig(newConfig: Partial<AuthConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    const validation = validateAuthConfig(this.config);\n    if (!validation.valid) {\n      throw new Error(`Configuraci√≥n inv√°lida: ${validation.errors.join(', ')}`);\n    }\n\n    // Reinicializar servicios si es necesario\n    if (newConfig.jwtSecret) {\n      this.jwtService = new JWTService(this.config.jwtSecret);\n    }\n  }\n\n  /**\n   * Poblar base de datos con datos iniciales\n   */\n  async seed(): Promise<void> {\n    await seedDatabase();\n  }\n\n  /**\n   * Limpiar base de datos\n   */\n  async clean(): Promise<void> {\n    await cleanDatabase();\n  }\n\n  /**\n   * Resetear base de datos\n   */\n  async reset(): Promise<void> {\n    await resetDatabase();\n  }\n\n  /**\n   * Verificar estado de la base de datos\n   */\n  async checkStatus(): Promise<void> {\n    await checkDatabaseStatus();\n  }\n\n  /**\n   * Cerrar conexiones y limpiar recursos\n   */\n  async close(): Promise<void> {\n    closeDatabase();\n    console.log('‚úÖ Auth Library cerrada correctamente');\n  }\n}\n\n// Instancia por defecto\nlet defaultInstance: AuthLibrary | null = null;\n\n/**\n * Obtener instancia por defecto de la librer√≠a\n */\nexport function getAuthLibrary(config?: Partial<AuthConfig>): AuthLibrary {\n  if (!defaultInstance) {\n    defaultInstance = new AuthLibrary(config);\n  }\n  return defaultInstance;\n}\n\n/**\n * Inicializar la librer√≠a con configuraci√≥n por defecto\n */\nexport async function initializeAuth(config?: Partial<AuthConfig>): Promise<AuthLibrary> {\n  const library = getAuthLibrary(config);\n  await library.initialize();\n  return library;\n}\n\n/**\n * Funci√≥n de conveniencia para crear middleware de Hono\n */\nexport function createHonoAuth(config?: Partial<AuthConfig>) {\n  const library = getAuthLibrary(config);\n  return {\n    middleware: honoAuthMiddleware,\n    optional: honoOptionalAuth,\n    required: honoRequireAuth,\n    permissions: honoRequirePermissions,\n    roles: honoRequireRoles,\n    admin: honoRequireAdmin,\n    moderator: honoRequireModerator,\n    ownership: honoRequireOwnership,\n    rateLimit: honoRateLimit,\n    cors: honoCorsAuth,\n    logger: honoAuthLogger,\n    library\n  };\n}\n\n/**\n * Funci√≥n de conveniencia para crear middleware de Express\n */\nexport function createExpressAuth(config?: Partial<AuthConfig>) {\n  const library = getAuthLibrary(config);\n  return {\n    middleware: expressAuthMiddleware,\n    optional: expressOptionalAuth,\n    required: expressRequireAuth,\n    permissions: expressRequirePermissions,\n    roles: expressRequireRoles,\n    admin: expressRequireAdmin,\n    moderator: expressRequireModerator,\n    ownership: expressRequireOwnership,\n    rateLimit: expressRateLimit,\n    cors: expressCorsAuth,\n    logger: expressAuthLogger,\n    errorHandler: expressAuthErrorHandler,\n    jsonValidator: expressJsonValidator,\n    sanitizer: expressSanitizer,\n    library\n  };\n}\n\n/**\n * Funci√≥n de conveniencia para WebSocket\n */\nexport function createWebSocketAuth(config?: Partial<AuthConfig>) {\n  const library = getAuthLibrary(config);\n  return {\n    authenticate: authenticateWebSocket,\n    checkPermissions: checkWebSocketPermissions,\n    checkRoles: checkWebSocketRoles,\n    getCurrentUser: getWebSocketCurrentUser,\n    isAuthenticated: isWebSocketAuthenticated,\n    getAuthContext: getWebSocketAuthContext,\n    sendToUser,\n    sendToUsersWithPermissions,\n    sendToUsersWithRoles,\n    broadcast: broadcastToAuthenticated,\n    getStats: getConnectionStats,\n    disconnect: disconnectUser,\n    cleanup: cleanupInactiveConnections,\n    handleMessage: handleAuthenticatedMessage,\n    createResponse: createWebSocketResponse,\n    initCleanup: initializeConnectionCleanup,\n    library\n  };\n}\n\n// Exportar por defecto la clase principal\nexport default AuthLibrary;\n\n/**\n * Informaci√≥n de la librer√≠a\n */\nexport const AUTH_LIBRARY_INFO = {\n  name: 'Framework-Agnostic Auth Library',\n  version: '1.0.0',\n  description: 'Librer√≠a de autenticaci√≥n y permisos agn√≥stica de framework con TypeScript, Bun y SQLite',\n  author: 'Auth Library Team',\n  frameworks: ['Hono', 'Express', 'WebSockets', 'Socket.IO', 'Fastify'],\n  features: [\n    'Framework-agnostic',\n    'TypeScript nativo',\n    'SQLite con Bun',\n    'JWT + bcrypt',\n    'RBAC (Role-Based Access Control)',\n    'Middlewares reutilizables',\n    'Migraciones autom√°ticas',\n    'Scripts de utilidad',\n    'Configuraci√≥n flexible',\n    'Logging integrado',\n    'Rate limiting',\n    'CORS configurado',\n    'Validaci√≥n de entrada',\n    'Sanitizaci√≥n de datos'\n  ]\n};\n\nconsole.log(`üìö ${AUTH_LIBRARY_INFO.name} v${AUTH_LIBRARY_INFO.version} cargada`);\n"
  ],
  "mappings": "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",
  "debugId": "ECAD094F5D364E7664756E2164756E21",
  "names": []
}